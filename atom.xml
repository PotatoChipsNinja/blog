<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>薯片忍者的小站</title>
  
  <subtitle>今天的故事 是明天的回忆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pcninja.cn/"/>
  <updated>2020-02-03T05:15:27.983Z</updated>
  <id>https://pcninja.cn/</id>
  
  <author>
    <name>薯片忍者</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>勇气的赞歌</title>
    <link href="https://pcninja.cn/2020/02/the-paean-of-courage/"/>
    <id>https://pcninja.cn/2020/02/the-paean-of-courage/</id>
    <published>2020-02-02T09:32:16.000Z</published>
    <updated>2020-02-03T05:15:27.983Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;截至2月2日24时，持续肆虐的2019-nCoV急性呼吸疾病已经确诊超过1.7万例，此外还有超过2.2万疑似病例和近19万密切接触者。自从疫情爆发以来，越来越多的恐慌、谣言、猜忌、不信任甚至谩骂充斥在社交网络。诚然，现在人民的爆发并不全是天灾造成的，而是更多的来自于从地方政府到中央政府的错误决策与丑闻。越是在这种政府公信力和民族凝聚力最脆弱的时候，故宫停车、人民日报带货、鄂A0260W、武汉红十字会阻拦央视记者一类的事件便越会被积怨已久的人们无限放大，并以此作为宣泄心中愤懑的对象。然而，当人们都沉浸在对丑恶的斥责中时，会不会忘记了世间仍然存在的美好，会不会忘记了此时此刻还有多少人在坚守自己的岗位。我想，赞美勇气，要远比抨击怯懦来得有意义。<br>&emsp;&emsp;刚刚看了回形针最新一期的视频<a href="https://www.bilibili.com/video/av86216616" target="_blank" rel="noopener">《关于新冠肺炎的一切》</a>，难能可贵的是，视频作者用客观的数据与文献资料向我们分析展示了关于此次疫情的真实信息。我在此对这些仍能保持冷静头脑的科普作者表示由衷的敬佩，并在下文引述视频中的一些内容，试图描绘此次疫情的大致轮廓。</p><div class="image-size-50"><img src="/2020/02/the-paean-of-courage/latest-animation.gif" title="2019-nCoV传播趋势（截至2月3日7时33分）"></div><a id="more"></a><blockquote><p>以下包含非原创内容</p></blockquote><h2 id="关于疫情的伊始"><a href="#关于疫情的伊始" class="headerlink" title="关于疫情的伊始"></a>关于疫情的伊始</h2><p>&emsp;&emsp;2019年12月8日，一位来自华南海鲜市场病人因为持续7天的发热、咳嗽和呼吸困难入院。5天后，他没有去过海鲜市场妻子也因为不明原因肺炎入院。<br>&emsp;&emsp;2020年1月1日，华南海鲜市场关闭。1月2日，41名新型肺炎患者被确诊。<br>&emsp;&emsp;此时喜迎新年的市民们还不知道，一场会感染上万人的瘟疫已经开始了。</p><h2 id="关于人传人"><a href="#关于人传人" class="headerlink" title="关于人传人"></a>关于人传人</h2><p>&emsp;&emsp;在1月24日发表于《柳叶刀》的论文《2019-nCoV感染患者的临床特征》（<a href="/2020/02/the-paean-of-courage/Clinical_features_of_patients_infected_with_2019_novel_coronavirus_in_Wuhan_China.pdf" title="下载">下载</a>）中，我们可以了解最早被确诊的 41 名患者的具体情况。<br>&emsp;&emsp;截至1月22日，41人中有28人出院，6人死亡。发烧和咳嗽是最常见的症状，从起病到呼吸困难，平均8天。</p><div class="image-size-50"><img src="/2020/02/the-paean-of-courage/1.png" title="2019-nCoV发病后时间线"></div><p>&emsp;&emsp;在肺炎初期，人传人的信号就已经很明显了，这41人中有14人都<strong>没有去过</strong>华南海鲜市场。</p><div class="image-size-50"><img src="/2020/02/the-paean-of-courage/2.png" title="14人无华南海鲜市场暴露史"></div><p>&emsp;&emsp;1月24日的另一篇论文《一场与2019年新型冠状病毒相关的家族肺炎表明了人与人之间的传播：家庭聚集研究》（<a href="/2020/02/the-paean-of-courage/A_familial_cluster_of_pneumonia_associated_with_the_2019_novel_coronavirus_indicating_person-to-person_transmission-_a_study_of_a_family_cluster.pdf" title="下载">下载</a>）研究了一个12月29前往在武汉旅行的深圳家庭。<br>&emsp;&emsp;最早出现症状的男士在到达武汉后的第4天开始发烧腹泻，之后3天，他的老婆岳父岳母和也都开始发烧咳嗽。1月5日，全家返回深圳，4天后，<strong>没有去过武汉</strong>的母亲开始全身乏力。最终，这个7口之家里，6人确诊新冠肺炎，包括他没有明显症状的儿子。</p><div class="image-size-50"><img src="/2020/02/the-paean-of-courage/3.png" title="深圳一家庭聚集传播案例"></div><p>&emsp;&emsp;1月30的论文《新型冠状病毒感染的肺炎在武汉的早期传播动态》（<a href="/2020/02/the-paean-of-courage/Early_Transmission_Dynamics_in_Wuhan_China_of_Novel_Coronavirus_Infected_Pneumonia.pdf" title="下载">下载</a>）进一步分析了武汉前425例确诊患者的数据。</p><div class="image-size-50"><img src="/2020/02/the-paean-of-courage/4.png" title="潜伏期分布"></div><p>&emsp;&emsp;这张表中，横坐标是从感染至发病的时间，纵坐标是相对概率。可以看到大部分感染者7天内就会发病，病毒的平均潜伏期是5.2天。<br>&emsp;&emsp;现在我们知道，在2020年1月11日之前确诊的295人里，<strong>只有45人去过华南海鲜市场，此外还有7名医护人员</strong>。</p><div class="image-size-50"><img src="/2020/02/the-paean-of-courage/5.png" title="多数患者与华南海鲜市场并无关联"></div><p>&emsp;&emsp;但在<strong>十天之后</strong>，人们才意识到要戴口罩了。</p><p><video src="/2020/02/the-paean-of-courage/video.mp4" width="500px" preload="preload" controls="controls"><br>您的浏览器不支持video标签。</video></p><p class="image-caption" style="padding-top: 15px;">1月20日晚，官方首次肯定人传人</p><h2 id="关于死亡率"><a href="#关于死亡率" class="headerlink" title="关于死亡率"></a>关于死亡率</h2><p>&emsp;&emsp;这是从1月16日到2月1日全中国累计确诊和死亡人数的增长曲线。如果我们用总死亡数除以总确诊数，可以得到一个2%左右的患病死亡率。</p><div class="image-size-50"><img src="/2020/02/the-paean-of-courage/6.png" title="确诊和死亡增长曲线（对数坐标）"></div><p>&emsp;&emsp;但这样的计算方式并不准确。根据前425名确诊患者的数据，我们可以知道病毒的平均潜伏期是5.2天，从发病到就诊平均是4.6天，就诊到入院平均4.5天，而入院到ICU是3.5天，假设从ICU到死亡是3天，整个过程就是21天左右。而如果就诊3天后就能确诊，那从确诊到死亡大概是8天。<br>&emsp;&emsp;所以，<strong>1月31号的死亡患者大概在1月23号确诊</strong>。如果我们用湖北省1月29日—1月31日这三天死亡的124人除以1月21日—1月23日确诊的279人的话，<strong>病死率高达44.4%</strong>。<br>&emsp;&emsp;但因为湖北省的医疗资源紧张确诊困难，很多老年病患发展到了重症才能确诊，病死率肯定偏高。相比之下，除湖北省外全国其他地区的数据更能反映真实情况。1月29日—1月31日，中国其他省份死亡患者共3人，除以1月21日—1月23日确诊的260人，病死率在1.1%左右，确实不高。<br>&emsp;&emsp;如果按照这个病死率倒推1月21日—1月23日的湖北感染者，那应该<strong>不是279人，而是10700人</strong>。<br>&emsp;&emsp;当然，这也只是一个非常粗糙的计算过程，样本量小，也不一定那么准确。但随着未来数据的完善，病死率的结果会越来越清晰。</p><h2 id="关于勇气"><a href="#关于勇气" class="headerlink" title="关于勇气"></a>关于勇气</h2><p>&emsp;&emsp;这场瘟疫让我们所有人精神紧张，但实际上，倒霉的事情每天都在发生。<br>&emsp;&emsp;过去几年，中国平均每年有8.8万人死于流感引发的呼吸系统疾病，6.3万人死于交通事故，3.8万人死于安全事故。只要我们迈出家门，去工地，去写字楼，去流水线，风险就已经存在了。<br>&emsp;&emsp;我们当然应该把倒霉的概率尽可能降低，<strong>但我们之所以赞颂勇气，是因为我们人类总是在明知风险的时候，仍然选择做我们该做的事情</strong>。</p><div class="image-size-50"><img src="/2020/02/the-paean-of-courage/7.jpeg" title="2019-nCoV电镜照片"></div><p>&emsp;&emsp;最后我们来看一眼这场肺炎的主角——这个直径在 0.1 微米左右的畸形圆球。可怕吗？我们已经知道了它的RNA序列、知道了它的感染机制、传播机制、临床表现和致死概率。其实也没那么吓人。<br>&emsp;&emsp;如果我们被这个吓到，吓到要锁死来自武汉的邻居，吓到要攻击陌生的求助者，吓到要<strong>以谣言的名义让大家不敢说话</strong>。那才是真的吓人。<br>&emsp;&emsp;<strong>人类的赞歌是勇气的赞歌</strong>，赞美所有还在认真工作的人们，希望新的一年，我们都能有更多勇气。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><p>&emsp;&emsp;惨象，已使我目不忍视了；流言，尤使我耳不忍闻。我还有什么话可说呢？我懂得衰亡民族之所以默无声息的缘由了。沉默呵，沉默呵！不在沉默中爆发，就在沉默中灭亡。</p><p align="right">——鲁迅</p></blockquote><p>&emsp;&emsp;值得庆幸的是，我们的社会还没有到“不在沉默中爆发，就在沉默中灭亡”的地步。但是，在这次疫情中，人民的政府、人民的红十字会，或者说我们的政府、我们的红十字会，仿佛已然陷入了塔西佗陷阱的无尽深渊。<br>&emsp;&emsp;真正的人民政府不会允许官员全副武装却让医生手无寸铁，真正的红十字会也不会把人民的捐赠据为己有。人民永远是历史的创造者，当“人民政府”不再“人民”，当公权力开始丧失公信力之时，新的历史就会被人民书写。<br>&emsp;&emsp;五千年屹立不倒的中华民族不会消亡，会消亡的只有失信于民的政权。真诚希望如今这个延续了七十年的政权能够幡然悔悟，带领人民走向安宁与富足，不要再让我们回到鲁迅所处的那至暗时代了。<br>&emsp;&emsp;人类的赞歌是勇气的赞歌,人类的伟大是勇气的伟大。人们的勇气终将战胜疫情，希望这一天早日到来。最后，祝愿正笼罩在恐惧中的同胞幸福安康，向依然奋战在一线的医务工作者致以崇高的敬意。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;截至2月2日24时，持续肆虐的2019-nCoV急性呼吸疾病已经确诊超过1.7万例，此外还有超过2.2万疑似病例和近19万密切接触者。自从疫情爆发以来，越来越多的恐慌、谣言、猜忌、不信任甚至谩骂充斥在社交网络。诚然，现在人民的爆发并不全是天灾造成的，而是更多的来自于从地方政府到中央政府的错误决策与丑闻。越是在这种政府公信力和民族凝聚力最脆弱的时候，故宫停车、人民日报带货、鄂A0260W、武汉红十字会阻拦央视记者一类的事件便越会被积怨已久的人们无限放大，并以此作为宣泄心中愤懑的对象。然而，当人们都沉浸在对丑恶的斥责中时，会不会忘记了世间仍然存在的美好，会不会忘记了此时此刻还有多少人在坚守自己的岗位。我想，赞美勇气，要远比抨击怯懦来得有意义。&lt;br&gt;&amp;emsp;&amp;emsp;刚刚看了回形针最新一期的视频&lt;a href=&quot;https://www.bilibili.com/video/av86216616&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《关于新冠肺炎的一切》&lt;/a&gt;，难能可贵的是，视频作者用客观的数据与文献资料向我们分析展示了关于此次疫情的真实信息。我在此对这些仍能保持冷静头脑的科普作者表示由衷的敬佩，并在下文引述视频中的一些内容，试图描绘此次疫情的大致轮廓。&lt;/p&gt;
&lt;div class=&quot;image-size-50&quot;&gt;&lt;img src=&quot;/2020/02/the-paean-of-courage/latest-animation.gif&quot; title=&quot;2019-nCoV传播趋势（截至2月3日7时33分）&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="其他" scheme="https://pcninja.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="疫情" scheme="https://pcninja.cn/tags/%E7%96%AB%E6%83%85/"/>
    
      <category term="死亡" scheme="https://pcninja.cn/tags/%E6%AD%BB%E4%BA%A1/"/>
    
      <category term="勇气" scheme="https://pcninja.cn/tags/%E5%8B%87%E6%B0%94/"/>
    
  </entry>
  
  <entry>
    <title>【备忘】 youtube-dl使用方法</title>
    <link href="https://pcninja.cn/2020/02/usage-of-youtube-dl/"/>
    <id>https://pcninja.cn/2020/02/usage-of-youtube-dl/</id>
    <published>2020-02-01T12:15:23.000Z</published>
    <updated>2020-02-01T13:29:05.869Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;youtube-dl是一个Python编写的开源的音视频下载工具，只支持命令行操作。虽然名为youtube-dl，但它支持的站点非常多，包括了诸多国内外知名的音视频网站（<a href="https://github.com/ytdl-org/youtube-dl/blob/master/docs/supportedsites.md" target="_blank" rel="noopener">查看完整的支持列表</a>）。由于指令较多，容易忘记，故将常用的指令记录在此，以备不时之需。<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方GitHub仓库地址：<a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">https://github.com/ytdl-org/youtube-dl</a><br>Windows下可以在releases页面找到最新发布版并直接下载<code>youtube-dl.exe</code>即可使用，更新方法如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -U</span><br></pre></td></tr></table></figure></p><p>Linux下可以通过<code>pip</code>安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install youtube-dl           # 安装</span><br><span class="line">pip uninstall youtube-dl         # 卸载</span><br><span class="line">pip install --upgrade youtube-dl # 更新</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>完整的指令列表和参数说明请见GitHub仓库里的官方文档，这里只记录最常用到的音视频下载指令<br>由于众所周知的原因，大多数情况下都需要使用代理下载YouTube上的内容，因此下面所有指令都加上了<code>--proxy socks5://127.0.0.1:1080/</code>，即通过socks5协议的本地代理下载，记得挂上梯子并开启本地端口</p><ul><li>列出所有可用的音视频格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --proxy socks5://127.0.0.1:1080/ -F [url]</span><br></pre></td></tr></table></figure></li></ul><p><div class="image-size-50"><img src="/2020/02/usage-of-youtube-dl/image.png" title="可用列表"></div><br>可以看到程序列出了该资源每个可用项的格式码、扩展名以及说明，其中包括<code>audio only</code>和<code>video only</code></p><ul><li><p>通过指定格式码下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --proxy socks5://127.0.0.1:1080/ -f [format code] [url]</span><br></pre></td></tr></table></figure></li><li><p>下载纯音频至指定格式（需ffmpeg）<br>需要保证ffmpeg在环境变量中或者与youtube-dl在同一目录才可正常转码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --proxy socks5://127.0.0.1:1080/ -x --audio-format mp3 [url]</span><br></pre></td></tr></table></figure></li></ul><p>该指令可以下载音频并通过ffmpeg转至mp3格式，仅保留<code>-x</code>参数可以不转格式</p><ul><li>下载最佳质量的音视频<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载最佳质量的音视频格式</span></span><br><span class="line">youtube-dl --proxy socks5://127.0.0.1:1080/ -f best [url]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载最佳质量的仅视频格式</span></span><br><span class="line">youtube-dl --proxy socks5://127.0.0.1:1080/ -f bestvideo [url]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载最佳质量的仅音频格式</span></span><br><span class="line">youtube-dl --proxy socks5://127.0.0.1:1080/ -f bestaudio [url]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别下载最高质量的仅视频和最高质量的仅音频格式，再用ffmpeg合并成一个最佳质量的mkv文件</span></span><br><span class="line">youtube-dl --proxy socks5://127.0.0.1:1080/ -f bestvideo+bestaudio [url]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;youtube-dl是一个Python编写的开源的音视频下载工具，只支持命令行操作。虽然名为youtube-dl，但它支持的站点非常多，包括了诸多国内外知名的音视频网站（&lt;a href=&quot;https://github.com/ytdl-org/youtube-dl/blob/master/docs/supportedsites.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;查看完整的支持列表&lt;/a&gt;）。由于指令较多，容易忘记，故将常用的指令记录在此，以备不时之需。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="https://pcninja.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="下载" scheme="https://pcninja.cn/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="工具" scheme="https://pcninja.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="视频" scheme="https://pcninja.cn/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="YouTube" scheme="https://pcninja.cn/tags/YouTube/"/>
    
  </entry>
  
  <entry>
    <title>除夕夜小记</title>
    <link href="https://pcninja.cn/2020/01/happy-chinese-new-year-2020/"/>
    <id>https://pcninja.cn/2020/01/happy-chinese-new-year-2020/</id>
    <published>2020-01-24T15:00:11.000Z</published>
    <updated>2020-01-24T15:36:39.081Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;除夕夜，万家灯火，十四亿华人共同迎接庚子年的到来。<br><a id="more"></a><br>&emsp;&emsp;这个新年并不太平，刚一进入2020年，中华民族的儿女就历经了巨大挑战：</p><ul><li>1月11日，蔡英文以史无前例的得票数连任台湾地区领导人，两岸关系不知将何去何从</li><li>1月16日，中美第一阶段经贸协议的签署让中国蒙受巨大损失，为即将打响的科技战、金融战埋下巨大隐患</li><li>1月23日，武汉封城，却难以阻止2019-nCoV在全国范围内大规模爆发，无人知晓真实的感染情况，无人知晓最终会付出多大的代价……</li></ul><p>&emsp;&emsp;2020年，无论是国家命运，亦或是每一个国民的命运，都将注定不凡。真诚祝愿中华民族能够“风雨压不垮，苦难中开花”，继续屹立在世界东方。<br>&emsp;&emsp;<strong>天佑中华！</strong></p><p></p><p align="right">己亥年除夕于家中</p><p></p><div class="image-size-50"><img src="/2020/01/happy-chinese-new-year-2020/image.png" title="鼠年快乐"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;除夕夜，万家灯火，十四亿华人共同迎接庚子年的到来。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://pcninja.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日记" scheme="https://pcninja.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://pcninja.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="新年" scheme="https://pcninja.cn/tags/%E6%96%B0%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>【音乐】庆祝中华人民共和国成立70周年阅兵式军乐欣赏</title>
    <link href="https://pcninja.cn/2019/10/the-military-music-of-the-parade/"/>
    <id>https://pcninja.cn/2019/10/the-military-music-of-the-parade/</id>
    <published>2019-10-03T12:12:54.000Z</published>
    <updated>2019-10-03T12:33:07.725Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="/player">点击进入播放器</a></p></blockquote><ul><li><strong>《钢铁洪流进行曲》</strong> - 中国人民解放军联合军乐团</li><li><strong>《东风浩荡进行曲》</strong> - 中国人民解放军联合军乐团</li><li><strong>《雄鹰出击进行曲》</strong> - 中国人民解放军联合军乐团</li><li><strong>《冲上云霄》</strong> - 中国人民解放军联合军乐团</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;/player&quot;&gt;点击进入播放器&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;《钢铁洪流进行曲》&lt;/strong&gt; - 中国人民解放军联合军乐团&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;《东风浩荡进行曲
      
    
    </summary>
    
      <category term="其他" scheme="https://pcninja.cn/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="军乐" scheme="https://pcninja.cn/tags/%E5%86%9B%E4%B9%90/"/>
    
      <category term="交响乐" scheme="https://pcninja.cn/tags/%E4%BA%A4%E5%93%8D%E4%B9%90/"/>
    
      <category term="阅兵" scheme="https://pcninja.cn/tags/%E9%98%85%E5%85%B5/"/>
    
  </entry>
  
  <entry>
    <title>暑假小结</title>
    <link href="https://pcninja.cn/2019/08/summer-vacation-summary/"/>
    <id>https://pcninja.cn/2019/08/summer-vacation-summary/</id>
    <published>2019-08-30T14:15:17.000Z</published>
    <updated>2019-08-30T14:30:31.284Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;此时此刻，窗外不断传来大一新生军训中演讲比赛的激昂呐喊。新鲜血液的涌入着实给了我一种紧迫感，回想一年前，我也和他们一样，刚刚踏入大学的校门，心中有憧憬也有迷茫。转眼一年过去了，仿佛憧憬与迷惘都变多了。<br>&emsp;&emsp;从7月13号到今天，一个半月的暑假已接近尾声。其实这个暑假做的事有限，掰着手指头数都能数的过来，所以本来没想写这个总结。但思前想后觉得还是应该简要记录一下，也算是警醒自己今后要做更多有意义的事。<a id="more"></a><br>&emsp;&emsp;文字能力有限，依旧是流水账。<br>&emsp;&emsp;小学期里，我们的任务是完成“外卖派单模拟系统”，这是我第一次着手这种具有一定规模的项目，项目需求与规则繁杂且模糊，并且几经修改，最要命的是在7月13号验收的前一天傍晚被要求新增不少功能，所有人都很无奈。好在经历了几天几夜的爆肝之后，顺利完成了验收。最终，我们花大量精力研究的算法在所有组的比拼中喜提头名，可喜可贺。然而看了别的组华丽的GUI之后我们才意识到我们在用户体验上所做的工作确实有些简陋，不过这也是在时间紧迫的前提下所做出的必然取舍，因为在我们看来，相比于图形界面，算法是我们更应该投入精力去琢磨的地方。<br>&emsp;&emsp;暑假伊始，由于刚刚结束了小学期的项目，有些身心俱疲，所以没干什么正事。唯一做的就是 Express + EJS + ajax + MongoDB 写了一个 ToDo List，顺带学到了些前端知识。到了七月底回到学校，参加某大型红色活动的训练，为期二十余天，除了太阳晒点，还是比较轻松欢愉的。训练之余，在宿舍学习了 Docker，并尝试把我所有的站点和服务进行容器化，不过目前还只是在虚拟机上，没有上线。等过段时间域名完成备案，可以A记录解析到服务器上之后应该就可以享受 <code>docker-compose up -d</code> 一键部署的快感了😝。<br>&emsp;&emsp;在此之后训练任务断断续续，我的暑假生活也以娱乐为主，通关了老早以前搁下的弹丸论破1和2，没事就和舍友开黑GTAOL，还是挺轻松加写意的。<br>&emsp;&emsp;总的来说这个暑假过得很快活，但有意义的事做得不多，换句话说，有点浪费。不过这一切都是我自己的选择，也不会后悔。期待下学期的学习生活，也期待十月一号能够用最好的表现为祖国母亲七十华诞献礼！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;此时此刻，窗外不断传来大一新生军训中演讲比赛的激昂呐喊。新鲜血液的涌入着实给了我一种紧迫感，回想一年前，我也和他们一样，刚刚踏入大学的校门，心中有憧憬也有迷茫。转眼一年过去了，仿佛憧憬与迷惘都变多了。&lt;br&gt;&amp;emsp;&amp;emsp;从7月13号到今天，一个半月的暑假已接近尾声。其实这个暑假做的事有限，掰着手指头数都能数的过来，所以本来没想写这个总结。但思前想后觉得还是应该简要记录一下，也算是警醒自己今后要做更多有意义的事。
    
    </summary>
    
      <category term="生活" scheme="https://pcninja.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日记" scheme="https://pcninja.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>中文文案排版指北</title>
    <link href="https://pcninja.cn/2019/08/chinese-copywriting-guidelines/"/>
    <id>https://pcninja.cn/2019/08/chinese-copywriting-guidelines/</id>
    <published>2019-08-19T14:32:27.000Z</published>
    <updated>2019-08-19T14:37:29.112Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="noopener">https://github.com/sparanoid/chinese-copywriting-guidelines</a></p></blockquote><h1 id="中文文案排版指北"><a href="#中文文案排版指北" class="headerlink" title="中文文案排版指北"></a>中文文案排版指北</h1><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。 毕竟爱情跟书写都需要适时地留白。</p><p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js" target="_blank" rel="noopener">vinta/paranoid-auto-spacing</a></p><h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。<br><a id="more"></a></p><h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p><p>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入屋宽带有 10 Gbps，SSD 一共有 20 TB</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入屋宽带有 10Gbps，SSD 一共有 20TB</p></blockquote><p>例外：度 / 百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。</p><p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。</p><p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p><p>刚刚买了一部 iPhone， 好开心！</p></blockquote><h3 id="用-text-spacing-来挽救？"><a href="#用-text-spacing-来挽救？" class="headerlink" title="用 text-spacing 来挽救？"></a>用 <code>text-spacing</code> 来挽救？</h3><p>CSS Text Module Level 4 的 <a href="https://www.w3.org/TR/css-text-4/#text-spacing-property" target="_blank" rel="noopener"><code>text-spacing</code></a> 和 Microsoft 的 <a href="https://msdn.microsoft.com/library/ms531164(v=vs.85" target="_blank" rel="noopener"><code>-ms-text-autospace</code></a>.aspx) 可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 macOS、iOS、Windows 等用户介面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！</p><p>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！</p><p>德国队竟然战胜了巴西队！！！！！！！！</p><p>她竟然对你说「喵」？？！！</p><p>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="noopener">全形和半形</a>』。</p><h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p><p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎！</p><p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎！</p><p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p><p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p><blockquote><p>这个蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这个蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全形数字的。</p><h3 id="遇到完整的英文整句、特殊名词，其内容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其内容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其内容使用半角标点"></a>遇到完整的英文整句、特殊名词，其内容使用半角标点</h3><p>正确：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry, stay foolish.」</p><p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry，stay foolish。」</p><p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论内容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录</p><p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录</p><p>使用 GITHUB 登录</p><p>使用 Github 登录</p><p>使用 gitHub 登录</p><p>使用 gｲんĤЦ8 登录</p><p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p><p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p><p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p><p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p><p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标淮的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p><p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="#">提交一个 issue</a>并分配给相关同事。</p><p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://github.com/sparanoid/chinese-copywriting-guidelines&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/sparanoid/chinese-copywriting-guidelines&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;中文文案排版指北&quot;&gt;&lt;a href=&quot;#中文文案排版指北&quot; class=&quot;headerlink&quot; title=&quot;中文文案排版指北&quot;&gt;&lt;/a&gt;中文文案排版指北&lt;/h1&gt;&lt;h2 id=&quot;空格&quot;&gt;&lt;a href=&quot;#空格&quot; class=&quot;headerlink&quot; title=&quot;空格&quot;&gt;&lt;/a&gt;空格&lt;/h2&gt;&lt;p&gt;「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。 毕竟爱情跟书写都需要适时地留白。&lt;/p&gt;
&lt;p&gt;与大家共勉之。」——&lt;a href=&quot;https://github.com/vinta/pangu.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vinta/paranoid-auto-spacing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;中英文之间需要增加空格&quot;&gt;&lt;a href=&quot;#中英文之间需要增加空格&quot; class=&quot;headerlink&quot; title=&quot;中英文之间需要增加空格&quot;&gt;&lt;/a&gt;中英文之间需要增加空格&lt;/h3&gt;&lt;p&gt;正确：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 LeanCloud 上，数据存储是围绕 &lt;code&gt;AVObject&lt;/code&gt; 进行的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在LeanCloud上，数据存储是围绕&lt;code&gt;AVObject&lt;/code&gt;进行的。&lt;/p&gt;
&lt;p&gt;在 LeanCloud上，数据存储是围绕&lt;code&gt;AVObject&lt;/code&gt; 进行的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完整的正确用法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 LeanCloud 上，数据存储是围绕 &lt;code&gt;AVObject&lt;/code&gt; 进行的。每个 &lt;code&gt;AVObject&lt;/code&gt; 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 &lt;code&gt;AVObject&lt;/code&gt; 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="文档" scheme="https://pcninja.cn/tags/%E6%96%87%E6%A1%A3/"/>
    
      <category term="标准" scheme="https://pcninja.cn/tags/%E6%A0%87%E5%87%86/"/>
    
      <category term="规范" scheme="https://pcninja.cn/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>virtualenv创建Python虚拟环境时抛出UnicodeDecodeError异常的解决</title>
    <link href="https://pcninja.cn/2019/07/solution-of-UnicodeDecodeError-thrown-by-virtualenv/"/>
    <id>https://pcninja.cn/2019/07/solution-of-UnicodeDecodeError-thrown-by-virtualenv/</id>
    <published>2019-07-25T12:04:12.000Z</published>
    <updated>2019-07-25T12:36:14.533Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在通过pip安装TensorFlow时遇到了一个问题，当执行<code>virtualenv --system-site-packages -p python ./venv</code>创建新的虚拟环境时会抛出如下异常：<a id="more"></a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 939, in call_subprocess</span><br><span class="line">    line = line.decode(encoding)</span><br><span class="line">UnicodeDecodeError: 'utf-8' codec can't decode byte 0xca in position 38: invalid continuation byte</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 2635, in &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 870, in main</span><br><span class="line">    symlink=options.symlink,</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 1173, in create_environment</span><br><span class="line">    install_wheel(to_install, py_executable, search_dirs, download=download)</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 1019, in install_wheel</span><br><span class="line">    _install_wheel_with_search_dir(download, project_names, py_executable, search_dirs)</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 1110, in _install_wheel_with_search_dir</span><br><span class="line">    call_subprocess(cmd, show_stdout=False, extra_env=env, stdin=script)</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 941, in call_subprocess</span><br><span class="line">    line = line.decode(fs_encoding)</span><br><span class="line">UnicodeDecodeError: 'utf-8' codec can't decode byte 0xca in position 38: invalid continuation byte</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;经过一番研究，原来出现异常的原因是调用<code>decode()</code>方法的<code>errors</code>参数为默认值<code>&quot;strict&quot;</code>，即任何编码错误都会引发UnicodeDecodeError，将其更改为<code>&quot;ignore&quot;</code>即可忽略错误。具体修改如下：<br>&emsp;&emsp;根据异常信息，将Python安装目录下的<code>.\Lib\site-packages\virtualenv.py</code>的第939行修改为<code>line = line.decode(encoding, &quot;ignore&quot;)</code>，即增加一个<code>&quot;ignore&quot;</code>参数。<br>再次尝试创建虚拟环境，此时就不会抛出异常了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Running virtualenv with interpreter E:\Python\python.exe</span><br><span class="line">Already using interpreter E:\Python\python.exe</span><br><span class="line">Using base prefix 'E:\\Python'</span><br><span class="line">New python executable in D:\TensorFlow\venv\Scripts\python.exe</span><br><span class="line">Installing setuptools, pip, wheel...</span><br><span class="line">done.</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这时我们就拥有了一套独立的Python运行环境，不用担心污染主环境了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;在通过pip安装TensorFlow时遇到了一个问题，当执行&lt;code&gt;virtualenv --system-site-packages -p python ./venv&lt;/code&gt;创建新的虚拟环境时会抛出如下异常：
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="https://pcninja.cn/tags/Python/"/>
    
      <category term="virtualenv" scheme="https://pcninja.cn/tags/virtualenv/"/>
    
      <category term="编码" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>【备忘】 SS代理服务器配置及优化</title>
    <link href="https://pcninja.cn/2019/07/configuration-and-optimization-of-ss-proxy-server/"/>
    <id>https://pcninja.cn/2019/07/configuration-and-optimization-of-ss-proxy-server/</id>
    <published>2019-07-15T12:41:21.000Z</published>
    <updated>2019-07-15T13:36:14.392Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;由于Vultr日本节点大量被墙，所以被迫转投DigitalOcean，最便宜的是5刀一个月，但首充5刀后会送50刀，再加上Github教育礼包里包含的50刀优惠（需要验证教育邮箱、上传学生证照片），所以算下来几乎可以白嫖两年，岂不美滋滋。美中不足是DigitalOcean的系统快照占用的存储空间是要另付费的，所以每次换IP开新机就需要重新配置代理服务器，这里简单记录一下流程和命令，方便以后复制。<br><a id="more"></a></p><blockquote><p>以Ubuntu 18.04搭建SS服务为例，如果今后SS情势不好可能会换用V2Ray</p></blockquote><h2 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h2><p>项目地址：<a href="https://github.com/shadowsocks/shadowsocks/tree/master" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks/tree/master</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 从源更新软件列表</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span> 安装pip</span><br><span class="line">apt-get install python-pip</span><br><span class="line"><span class="meta">#</span> pip安装SS</span><br><span class="line">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</span><br></pre></td></tr></table></figure></p><p>安装完成后可以建两个脚本<code>start.sh</code>、<code>stop.sh</code>方便控制服务开关（或编写json配置文件，反而麻烦）<br>start.sh：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -p 端口 -k 密码 -m aes-256-cfb --user nobody -d start</span><br></pre></td></tr></table></figure></p><p>stop.sh：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -d stop</span><br></pre></td></tr></table></figure></p><p>最后还要给这两个脚本赋予执行权限<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x start.sh stop.sh    # 或直接chmod 777</span><br></pre></td></tr></table></figure></p><p>开启服务之前可以做以下优化，提高带宽利用率</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>首先按照官方Wiki上的教程进行优化，地址：<a href="https://github.com/shadowsocks/shadowsocks/wiki/Optimizing-Shadowsocks" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks/wiki/Optimizing-Shadowsocks</a><br>创建<code>/etc/sysctl.d/local.conf</code>并写入以下配置：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> max open files</span><br><span class="line">fs.file-max = 51200</span><br><span class="line"><span class="meta">#</span> max read buffer</span><br><span class="line">net.core.rmem_max = 67108864</span><br><span class="line"><span class="meta">#</span> max write buffer</span><br><span class="line">net.core.wmem_max = 67108864</span><br><span class="line"><span class="meta">#</span> default read buffer</span><br><span class="line">net.core.rmem_default = 65536</span><br><span class="line"><span class="meta">#</span> default write buffer</span><br><span class="line">net.core.wmem_default = 65536</span><br><span class="line"><span class="meta">#</span> max processor input queue</span><br><span class="line">net.core.netdev_max_backlog = 4096</span><br><span class="line"><span class="meta">#</span> max backlog</span><br><span class="line">net.core.somaxconn = 4096</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> resist SYN flood attacks</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"><span class="meta">#</span> reuse timewait sockets when safe</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"><span class="meta">#</span> turn off fast timewait sockets recycling</span><br><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line"><span class="meta">#</span> short FIN timeout</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"><span class="meta">#</span> short keepalive time</span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line"><span class="meta">#</span> outbound port range</span><br><span class="line">net.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line"><span class="meta">#</span> max SYN backlog</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class="line"><span class="meta">#</span> max timewait sockets held by system simultaneously</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line"><span class="meta">#</span> turn on TCP Fast Open on both client and server side</span><br><span class="line">net.ipv4.tcp_fastopen = 3</span><br><span class="line"><span class="meta">#</span> TCP receive buffer</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</span><br><span class="line"><span class="meta">#</span> TCP write buffer</span><br><span class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</span><br><span class="line"><span class="meta">#</span> turn on path MTU discovery</span><br><span class="line">net.ipv4.tcp_mtu_probing = 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> for high-latency network</span><br><span class="line">net.ipv4.tcp_congestion_control = hybla</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> for low-latency network, use cubic instead</span><br><span class="line"><span class="meta">#</span> net.ipv4.tcp_congestion_control = cubic</span><br></pre></td></tr></table></figure></p><p>最后的<code>net.ipv4.tcp_congestion_control</code>选择<code>hybla</code>还是<code>cubic</code>取决于服务器延迟的高低<br>然后加载我们写好的配置文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl --system</span><br></pre></td></tr></table></figure></p><p>接下来是启用TCP BBR拥塞控制算法，可以用来取代ServerSpeeder<br>已经有人做好了傻瓜式脚本，我们只需要根据提示操作：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure></p><p>使用<code>lsmod | grep bbr</code>查看系统模块，若返回<code>tcp_bbr</code>说明BBR已启动</p><p>这时我们就可以运行<code>start.sh</code>，开启代理服务，进行科学上网了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;由于Vultr日本节点大量被墙，所以被迫转投DigitalOcean，最便宜的是5刀一个月，但首充5刀后会送50刀，再加上Github教育礼包里包含的50刀优惠（需要验证教育邮箱、上传学生证照片），所以算下来几乎可以白嫖两年，岂不美滋滋。美中不足是DigitalOcean的系统快照占用的存储空间是要另付费的，所以每次换IP开新机就需要重新配置代理服务器，这里简单记录一下流程和命令，方便以后复制。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="https://pcninja.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux" scheme="https://pcninja.cn/tags/Linux/"/>
    
      <category term="服务器" scheme="https://pcninja.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="代理" scheme="https://pcninja.cn/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>写在十八岁的最后一天</title>
    <link href="https://pcninja.cn/2019/07/on-my-last-day-of-eighteen/"/>
    <id>https://pcninja.cn/2019/07/on-my-last-day-of-eighteen/</id>
    <published>2019-07-07T13:09:47.000Z</published>
    <updated>2019-07-07T13:26:12.105Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;十八岁，过的可真快，转眼就到了最后一天，以至于我还没反应过来。这就好比，在看一场精彩绝伦的足球赛时，往往会觉得上半场怎么这么快就结束了。而我的十八岁，虽称不上精彩，但也足够充实，或者说，只是单纯的忙碌，忙碌到这一年里发生的许多事我都快忘却了，所以我才要在这儿记下那些快要忘却的事，也算是对自己的十八岁做个简要的小结吧。<br><a id="more"></a><br>&emsp;&emsp;如果用一个词来总结这一年的话，我想应该是五味杂陈吧，因为这一年里，我哭过，痛过，累过，当然，也笑过。在度过了一个安逸的暑假之后，我开启了大学之旅，第一学期可以说是平淡无奇的四个月——很快我就适应了大学里的生活节奏，接着就是在上课、作业、游戏中轮回，周而复始。除了基本的课业知识，没有任何长进，虽然成绩还不错，但我对那个学期是不满意的，因为我虚度了四个月的时光。<br>&emsp;&emsp;浪费就会受到惩罚，这是颠扑不破的真理。很快，惩罚就降临了。我别无选择，只得默默接受。接下来的寒假对我来说无疑是煎熬的，当然，也有痛定思痛、扪心自问。<br>&emsp;&emsp;在假期临近结束之际，我做出了让我自己为之骄傲的决定，我遵从了自己的内心，提交了转专业申请，向自己的热爱与理想迈出了一大步。这一次，我终于没再辜负你，也没再辜负自己，这就是我为之骄傲的原因。<br>&emsp;&emsp;第二学期，我体验到了从未有过的忙碌与充实，大大小小的事务等待着我去一一处理，一个个抉择与挑战摆在我面前。这个学期，我参加了ACM校赛，见识了那些高水平选手的风采，让我深刻体会到天外有天，人外有人。我正视到自己的差距，意识到此刻开始追赶并不是一个明智的选择，ACM竞赛也并非我所认为的计算机科学的最好体现。正所谓条条大路通罗马，我需要尽早找到自己真正感兴趣的方向，追寻我所憧憬的计算机科学。<br>&emsp;&emsp;这一年，也是我自信心大幅提升的一年。我向自己证明了我的能力：第一学期综合成绩排名18/808，转入计科实验班后排名3/55，进入火花空间创客社团技术组，担任过一次技术沙龙的主讲人，带领宿舍全员设计开发寻物微信小程序……这些成绩告诉我，我不必自卑，无论在哪，我都能够站稳脚跟、发挥自己的作用、实现自己的价值。<br>&emsp;&emsp;人际交往方面，我倒是没有什么变化：不大不小的朋友圈，几个挚友，一个念念不忘的人，没有树敌。偶尔会感到孤独，但孤独是人生的必修课，我想这样就挺好。<br>&emsp;&emsp;这学期有位老师的一段话引发了我的思考：“科学是和人们的生活不相干的东西，而造福人类的是技术”。一开始，我对这种说法嗤之以鼻，心想科学怎么会和人们无关呢，但仔细想想，这种说法其实不无道理，科学与技术相辅相成——科学是技术的前提，而技术是科学的实现，因此科学对生活的影响是间接的，技术是直接的。我认为科学之于技术好比世界观之于方法论：方法论真正左右我们的行为，而决定方法论的却是世界观。<br>&emsp;&emsp;对科学与技术的思考让我对未来感到有些迷茫。如果你在十年前问我未来的职业理想是什么，我也许会给出和大部分孩子一样的答案：科学家，当然，这是一个极其笼统的回答；如果你在三年前问我同样的问题，我会毫不犹豫的回答你：计算机科学家；但如果你现在再来问我，我会犹豫，因为也许技术从业者会为这个社会创造更大的价值。这样的迷茫可能会持续一段时间，在我找到答案之前，我需要不断培养自己的计算思维、扩充自己的技术栈，尽可能做到理论与实践并行。<br>&emsp;&emsp;还有三个小时，我的十八岁就要过去了，竟有些伤感。十八岁，有太多的始料未及，此后，再不会有八月瓢泼大雨里的那种感动，再不会有一月寒风凛冽中的那种悲痛。时间会冲淡一切，现在需要我做的，就是以更好的态度，迎接十九岁的时空旅行。<br>&emsp;&emsp;薯片忍者，生日快乐！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;十八岁，过的可真快，转眼就到了最后一天，以至于我还没反应过来。这就好比，在看一场精彩绝伦的足球赛时，往往会觉得上半场怎么这么快就结束了。而我的十八岁，虽称不上精彩，但也足够充实，或者说，只是单纯的忙碌，忙碌到这一年里发生的许多事我都快忘却了，所以我才要在这儿记下那些快要忘却的事，也算是对自己的十八岁做个简要的小结吧。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://pcninja.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日记" scheme="https://pcninja.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://pcninja.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="情感" scheme="https://pcninja.cn/tags/%E6%83%85%E6%84%9F/"/>
    
      <category term="人生" scheme="https://pcninja.cn/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构考试——链表去重</title>
    <link href="https://pcninja.cn/2019/06/linked-list-duplicate-removal/"/>
    <id>https://pcninja.cn/2019/06/linked-list-duplicate-removal/</id>
    <published>2019-06-17T13:53:07.000Z</published>
    <updated>2019-06-17T14:02:21.531Z</updated>
    
    <content type="html"><![CDATA[<p><strong>链表去重</strong><br>时间限制: 400 ms<br>内存限制: 64 MB</p><p>给定一个带整数键值的链表 L，你需要把其中绝对值重复的键值结点删掉。即对每个键值 K，只有第一个绝对值等于 K 的结点被保留。同时，所有被删除的结点须被保存在另一个链表上。例如给定 L 为 21→-15→-15→-7→15，你需要输出去重后的链表 21→-15→-7，还有被删除的链表 -15→15。<br><a id="more"></a><br><strong>输入格式：</strong><br>输入在第一行给出 L 的第一个结点的地址和一个正整数 N（≤10^5，为结点总数）。一个结点的地址是非负的 5 位整数，空地址 NULL 用 -1 来表示。<br>随后 N 行，每行按以下格式描述一个结点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址 键值 下一个结点</span><br></pre></td></tr></table></figure></p><p>其中<code>地址</code>是该结点的地址，<code>键值</code>是绝对值不超过10^4的整数，下一个结点是下个结点的地址。</p><p><strong>输出格式：</strong><br>首先输出去重后的链表，然后输出被删除的链表。每个结点占一行，按输入的格式输出。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00100 5</span><br><span class="line">99999 -7 87654</span><br><span class="line">23854 -15 00000</span><br><span class="line">87654 15 -1</span><br><span class="line">00000 -15 99999</span><br><span class="line">00100 21 23854</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00100 21 23854</span><br><span class="line">23854 -15 99999</span><br><span class="line">99999 -7 -1</span><br><span class="line">00000 -15 87654</span><br><span class="line">87654 15 -1</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125; ram[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> exist[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start, n, addr, val, next;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;start, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;addr, &amp;val, &amp;next);</span><br><span class="line">        ram[addr].val = val;</span><br><span class="line">        ram[addr].next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a[n], na = <span class="number">1</span>, b[n], nb = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>] = start;</span><br><span class="line">    exist[<span class="built_in">abs</span>(ram[start].val)] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = ram[start].next; i != <span class="number">-1</span>; i = ram[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!exist[<span class="built_in">abs</span>(ram[i].val)])</span><br><span class="line">        &#123;</span><br><span class="line">            exist[<span class="built_in">abs</span>(ram[i].val)]++;</span><br><span class="line">            a[na++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b[nb++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; na; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d %d "</span>, a[i], ram[a[i]].val);</span><br><span class="line">        <span class="keyword">if</span>(i == na<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%05d\n"</span>, a[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nb; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d %d "</span>, b[i], ram[b[i]].val);</span><br><span class="line">        <span class="keyword">if</span>(i == nb<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%05d\n"</span>, b[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;链表去重&lt;/strong&gt;&lt;br&gt;时间限制: 400 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;给定一个带整数键值的链表 L，你需要把其中绝对值重复的键值结点删掉。即对每个键值 K，只有第一个绝对值等于 K 的结点被保留。同时，所有被删除的结点须被保存在另一个链表上。例如给定 L 为 21→-15→-15→-7→15，你需要输出去重后的链表 21→-15→-7，还有被删除的链表 -15→15。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="链表" scheme="https://pcninja.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="Hash" scheme="https://pcninja.cn/tags/Hash/"/>
    
  </entry>
  
  <entry>
    <title>数据结构考试——关于堆的判断</title>
    <link href="https://pcninja.cn/2019/06/judgment-of-heap/"/>
    <id>https://pcninja.cn/2019/06/judgment-of-heap/</id>
    <published>2019-06-17T13:31:35.000Z</published>
    <updated>2019-06-17T14:03:54.027Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关于堆的判断</strong><br>时间限制: 400 ms<br>内存限制: 64 MB</p><p>将一系列给定数字顺序插入一个初始为空的小顶堆<code>H[]</code>。随后判断一系列相关命题是否为真。命题分下列几种：</p><ul><li><code>x is the root</code>：<code>x</code>是根结点；</li><li><code>x and y are siblings</code>：<code>x</code>和<code>y</code>是兄弟结点；</li><li><code>x is the parent of y</code>：<code>x</code>是<code>y</code>的父结点；</li><li><code>x is a child of y</code>：<code>x</code>是<code>y</code>的一个子结点。</li></ul><a id="more"></a><p><strong>输入格式：</strong><br>每组测试第1行包含2个正整数<code>N</code>（≤ 1000）和<code>M</code>（≤ 20），分别是插入元素的个数、以及需要判断的命题数。下一行给出区间[−10000,10000]内的<code>N</code>个要被插入一个初始为空的小顶堆的整数。之后<code>M</code>行，每行给出一个命题。题目保证命题中的结点键值都是存在的。</p><p><strong>输出格式：</strong><br>对输入的每个命题，如果其为真，则在一行中输出<code>T</code>，否则输出<code>F</code>。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">46 23 26 24 10</span><br><span class="line">24 is the root</span><br><span class="line">26 and 23 are siblings</span><br><span class="line">46 is the parent of 23</span><br><span class="line">23 is a child of 10</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F</span><br><span class="line">T</span><br><span class="line">F</span><br><span class="line">T</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> H[<span class="number">1005</span>], ind[<span class="number">20005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adj</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span>    <span class="comment">//向下调整</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc = H[start];</span><br><span class="line">    <span class="keyword">int</span> s = start;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = start * <span class="number">2</span>; j &lt;= end; j *= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; end &amp;&amp; H[j+<span class="number">1</span>] &lt; H[j])</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span>(rc &gt; H[j])</span><br><span class="line">        &#123;</span><br><span class="line">            H[s] = H[j];</span><br><span class="line">            s = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    H[s] = rc;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;H[i+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = (i+<span class="number">1</span>)/<span class="number">2</span>; j &gt; <span class="number">0</span>; --j)    <span class="comment">//每次插入后都需要向上调整成小根堆</span></span><br><span class="line">            adj(j, i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存储索引</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ind[H[i+<span class="number">1</span>] + <span class="number">10000</span>] = i+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a, b, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> comm[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;a, comm);</span><br><span class="line">        <span class="keyword">if</span>(comm[<span class="number">0</span>] == <span class="string">'a'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%*s%*s"</span>, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(ind[a + <span class="number">10000</span>] / <span class="number">2</span> == ind[b + <span class="number">10000</span>] / <span class="number">2</span>)</span><br><span class="line">                ans = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, comm);</span><br><span class="line">            <span class="keyword">if</span>(comm[<span class="number">0</span>] == <span class="string">'a'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%*s%*s%d"</span>, &amp;b);</span><br><span class="line">                <span class="keyword">if</span>(ind[a + <span class="number">10000</span>] / <span class="number">2</span> == ind[b + <span class="number">10000</span>])</span><br><span class="line">                    ans = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>, comm);</span><br><span class="line">                <span class="keyword">if</span>(comm[<span class="number">0</span>] == <span class="string">'r'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ind[a + <span class="number">10000</span>] == <span class="number">1</span>)</span><br><span class="line">                        ans = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%*s%d"</span>, &amp;b);</span><br><span class="line">                    <span class="keyword">if</span>(ind[b + <span class="number">10000</span>] / <span class="number">2</span> == ind[a + <span class="number">10000</span>])</span><br><span class="line">                        ans = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, ans ? <span class="string">'T'</span> : <span class="string">'F'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;关于堆的判断&lt;/strong&gt;&lt;br&gt;时间限制: 400 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;将一系列给定数字顺序插入一个初始为空的小顶堆&lt;code&gt;H[]&lt;/code&gt;。随后判断一系列相关命题是否为真。命题分下列几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x is the root&lt;/code&gt;：&lt;code&gt;x&lt;/code&gt;是根结点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x and y are siblings&lt;/code&gt;：&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;是兄弟结点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x is the parent of y&lt;/code&gt;：&lt;code&gt;x&lt;/code&gt;是&lt;code&gt;y&lt;/code&gt;的父结点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x is a child of y&lt;/code&gt;：&lt;code&gt;x&lt;/code&gt;是&lt;code&gt;y&lt;/code&gt;的一个子结点。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="堆" scheme="https://pcninja.cn/tags/%E5%A0%86/"/>
    
      <category term="二叉树" scheme="https://pcninja.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="最小堆" scheme="https://pcninja.cn/tags/%E6%9C%80%E5%B0%8F%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——最大数</title>
    <link href="https://pcninja.cn/2019/05/maxnumber/"/>
    <id>https://pcninja.cn/2019/05/maxnumber/</id>
    <published>2019-05-25T02:04:44.000Z</published>
    <updated>2019-05-25T02:18:15.951Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最大数</strong><br>时间限制: 1000 ms<br>内存限制: 128 MB</p><p>现在请求你维护一个数列，要求提供以下两种操作：<br>1、 查询操作。<br>语法：<code>Q L</code><br>功能：查询当前数列中末尾<code>L</code>个数中的最大的数，并输出这个数的值。<br>限制：<code>L</code>不超过当前数列的长度。(<code>L</code> &gt; 0)<br>2、 插入操作。<br>语法：<code>A n</code><br>功能：将<code>n</code>加上<code>t</code>，其中<code>t</code>是最近一次查询操作的答案（如果还未执行过查询操作，则<code>t</code> = 0)，并将所得结果对一个固定的常数<code>D</code>取模，将所得答案插入到数列的末尾。<br>限制：<code>n</code>是整数（可能为负数）并且在长整范围内。</p><p>注意：初始时数列是空的，没有一个数。<br><a id="more"></a><br><strong>输入格式：</strong><br>第一行两个整数，<code>M</code>和<code>D</code>，其中MM表示操作的个数(<code>M</code> ≤ 200,000)，<code>D</code>如上文中所述，满足(0 &lt; <code>D</code> &lt; 2,000,000,000)<br>接下来的<code>M</code>行，每行一个字符串，描述一个具体的操作。语法如上文所述。</p><p><strong>输出格式：</strong><br>对于每一个查询操作，你应该按照顺序依次输出结果，每个结果占一行。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 100</span><br><span class="line">A 96</span><br><span class="line">Q 1</span><br><span class="line">A 97</span><br><span class="line">Q 1</span><br><span class="line">Q 2</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">96</span><br><span class="line">93</span><br><span class="line">96</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, pos;</span><br><span class="line">&#125; <span class="built_in">stack</span>[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, top = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> val)</span>    <span class="comment">//压栈，维护单调递减</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">stack</span>[top].val &lt;= val)</span><br><span class="line">        top--;</span><br><span class="line">    <span class="built_in">stack</span>[++top].val = val;</span><br><span class="line">    <span class="built_in">stack</span>[top].pos = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> len)</span>    <span class="comment">//二分查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans, mid, l = <span class="number">0</span>, r = top;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">stack</span>[mid].pos &gt;= cnt - len)</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">            ans = <span class="built_in">stack</span>[mid].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, d, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val;</span><br><span class="line">    <span class="keyword">char</span> cmd[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;d);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%lld"</span>, cmd, &amp;val);</span><br><span class="line">        <span class="keyword">if</span>(cmd[<span class="number">0</span>] == <span class="string">'A'</span>)</span><br><span class="line">            push((val + t) % d);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t = query(val));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;最大数&lt;/strong&gt;&lt;br&gt;时间限制: 1000 ms&lt;br&gt;内存限制: 128 MB&lt;/p&gt;
&lt;p&gt;现在请求你维护一个数列，要求提供以下两种操作：&lt;br&gt;1、 查询操作。&lt;br&gt;语法：&lt;code&gt;Q L&lt;/code&gt;&lt;br&gt;功能：查询当前数列中末尾&lt;code&gt;L&lt;/code&gt;个数中的最大的数，并输出这个数的值。&lt;br&gt;限制：&lt;code&gt;L&lt;/code&gt;不超过当前数列的长度。(&lt;code&gt;L&lt;/code&gt; &amp;gt; 0)&lt;br&gt;2、 插入操作。&lt;br&gt;语法：&lt;code&gt;A n&lt;/code&gt;&lt;br&gt;功能：将&lt;code&gt;n&lt;/code&gt;加上&lt;code&gt;t&lt;/code&gt;，其中&lt;code&gt;t&lt;/code&gt;是最近一次查询操作的答案（如果还未执行过查询操作，则&lt;code&gt;t&lt;/code&gt; = 0)，并将所得结果对一个固定的常数&lt;code&gt;D&lt;/code&gt;取模，将所得答案插入到数列的末尾。&lt;br&gt;限制：&lt;code&gt;n&lt;/code&gt;是整数（可能为负数）并且在长整范围内。&lt;/p&gt;
&lt;p&gt;注意：初始时数列是空的，没有一个数。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="单调栈" scheme="https://pcninja.cn/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="二分查找" scheme="https://pcninja.cn/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>记一个精巧的算法与一段感伤的话</title>
    <link href="https://pcninja.cn/2019/05/record-a-clever-algorithm-and-a-sentimental-remark/"/>
    <id>https://pcninja.cn/2019/05/record-a-clever-algorithm-and-a-sentimental-remark/</id>
    <published>2019-05-20T12:46:50.000Z</published>
    <updated>2019-05-20T13:32:37.503Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;5月20号，中午吃饭，看见一道很有意思的题，题面很简单：</p><blockquote><p>&emsp;&emsp;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p></blockquote><p>这道题解法颇多，但如果要求时间复杂度为O(n)，空间复杂度为O(1)，问题就似乎变得有挑战性了。<br><a id="more"></a><br>&emsp;&emsp;此题的正解非常简单也极其巧妙：将所有元素做异或运算，即a[1] ⊕ a[2] ⊕ a[3] ⊕ … ⊕ a[n]，所得的结果就是那个只出现一次的数字。<br>&emsp;&emsp;原理很好理解：出现2次（可推广为偶数次）的元素经过按位异或后全部变为0，而出现1次（可推广为奇数次）的元素与0进行异或后会被保留。因此所有元素依次异或后得到的结果即为所求。<br>代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LeetCode No.136</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; ++i)</span><br><span class="line">        ans ^= nums[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;晚上打完球回到宿舍，看到下面这段话，有所触动，一种难以言状的思绪在心中徘徊。在此把这段话摘录下来：</p><blockquote><p>年轻时<br>你做了一个决定<br>要把生命献给爱情</p><p>后来<br>万箭穿心的时候<br>你没事<br>因为青春替你抵了命</p><p>青春死了<br>但你还活着<br>可你却再也不会心动了</p><p>每个人都要熬过一段<br>付出很多却没有结果的爱情<br>才会一夜之间突然长大</p><p>所以不要笑话一个人面无表情<br>你只是没看到过<br>他汹涌的内心</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;5月20号，中午吃饭，看见一道很有意思的题，题面很简单：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这道题解法颇多，但如果要求时间复杂度为O(n)，空间复杂度为O(1)，问题就似乎变得有挑战性了。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="日记" scheme="https://pcninja.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="随笔" scheme="https://pcninja.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="情感" scheme="https://pcninja.cn/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——绳子与重物</title>
    <link href="https://pcninja.cn/2019/05/ropes-and-weights/"/>
    <id>https://pcninja.cn/2019/05/ropes-and-weights/</id>
    <published>2019-05-18T03:58:57.000Z</published>
    <updated>2019-05-25T02:10:24.129Z</updated>
    
    <content type="html"><![CDATA[<p><strong>绳子与重物</strong><br>时间限制: 400 ms<br>内存限制: 64 MB</p><p>有N条绳子编号 0 至 N - 1，每条绳子后面栓了一个重物重量为Wi，绳子的最大负重为Ci。每条绳子或挂在别的绳子下或直接挂在钩子上（编号-1）。如果绳子下所有重物的重量大于绳子的最大负重就会断掉（等于不会断）。依次给出每条绳子的负重Ci、重物的重量Wi以及绳子会挂在之前的哪条绳子的下面，问最多挂多少个绳子而不会出现绳子断掉的情况。<br><a id="more"></a><br>例如下图：</p><p>5, 2, -1<br>3, 3, 0<br>6, 1, -1<br>3, 1, 0<br>3, 2, 3</p><div class="image-size-50"><img src="/2019/05/ropes-and-weights/1.png"></div>挂到第4个时会有绳子断掉，所以输出3。<div class="image-size-50"><img src="/2019/05/ropes-and-weights/2.png"></div><p><strong>输入格式：</strong><br>第1行：1个数N，表示绳子的数量(1 &lt;= N &lt;= 50000)。<br>第2 - N+1行：每行3个数，Ci, Wi, Pi。Ci表示最大负重，Wi表示重物的重量，Pi表示挂在哪个绳子上，如果直接挂在钩子上则Pi = -1（1 &lt;= Ci &lt;= 10^9，1 &lt;= Wi &lt;= 10^9，-1 &lt;= Pi &lt;= N - 2)。</p><p><strong>输出格式：</strong><br>输出1个数，最多挂到第几个绳子，不会出现绳子断掉的情况。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5 2 -1</span><br><span class="line">3 3 0</span><br><span class="line">6 1 -1</span><br><span class="line">3 1 0</span><br><span class="line">3 2 3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> c, w, p, fa;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">a</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 路径压缩的递归实现，大规模数据可能造成栈溢出</span></span><br><span class="line"><span class="comment">int find(int n)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(a[n].fa != n)</span></span><br><span class="line"><span class="comment">        a[n].fa = find(a[n].fa);</span></span><br><span class="line"><span class="comment">    return a[n].fa;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径压缩的非递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = n, curr = n, temp;</span><br><span class="line">    <span class="keyword">while</span>(a[root].fa != root)</span><br><span class="line">        root = a[root].fa;</span><br><span class="line">    <span class="keyword">while</span>(curr != root)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = a[curr].fa;</span><br><span class="line">        a[curr].fa = root;</span><br><span class="line">        curr = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    a = (struct node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node) * n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a[i].c, &amp;a[i].w, &amp;a[i].p);</span><br><span class="line">        a[i].fa = i;</span><br><span class="line">        a[i].sum = a[i].w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i].sum &gt; a[i].c)</span><br><span class="line">        &#123;</span><br><span class="line">            a[find(ans)].sum -= a[ans].w;</span><br><span class="line">            ans--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[a[i].p].sum += a[i].sum;</span><br><span class="line">        <span class="keyword">if</span>(a[i].p &gt; <span class="number">-1</span>)</span><br><span class="line">            a[i].fa = a[i].p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;绳子与重物&lt;/strong&gt;&lt;br&gt;时间限制: 400 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;有N条绳子编号 0 至 N - 1，每条绳子后面栓了一个重物重量为Wi，绳子的最大负重为Ci。每条绳子或挂在别的绳子下或直接挂在钩子上（编号-1）。如果绳子下所有重物的重量大于绳子的最大负重就会断掉（等于不会断）。依次给出每条绳子的负重Ci、重物的重量Wi以及绳子会挂在之前的哪条绳子的下面，问最多挂多少个绳子而不会出现绳子断掉的情况。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="并查集" scheme="https://pcninja.cn/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="路径压缩" scheme="https://pcninja.cn/tags/%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>证明两种线性对数阶复杂度的表示方法等价</title>
    <link href="https://pcninja.cn/2019/05/prove-the-equivalence-of-two-representations-of-complexity-of-quasilinear-time/"/>
    <id>https://pcninja.cn/2019/05/prove-the-equivalence-of-two-representations-of-complexity-of-quasilinear-time/</id>
    <published>2019-05-16T11:20:35.000Z</published>
    <updated>2019-05-16T12:58:27.648Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是离散数学中一道关于算法渐进复杂度的证明题：求证 <script type="math/tex">\log_2n!\in\Theta(n\log_2n)</script> 。<br>&emsp;&emsp;看了网上的一些证明，大多借助斯特林公式，即 <script type="math/tex">\lim\limits_{n\to+\infty}\frac{n!}{\sqrt{2\pi n}(\frac ne)^n}=1</script> ，将 <script type="math/tex">n!</script> 替换成同阶的 <script type="math/tex">\sqrt{2\pi n}(\frac ne)^n</script> 进行证明。若不熟悉该公式，很难想到这种等价替换。在此给出一种比较朴素的证明方法。<br><a id="more"></a><br>证明分两部分：<br>1.&emsp;先证 <script type="math/tex">\log_2n!\in O(n\log_2n)</script></p><script type="math/tex; mode=display">\begin{aligned}&∵\ ∀n\gt0,\ \log_2n!\le \log_2n^n=n\log_2n \\&∴\ \log_2n!\in O(n\log_2n)\end{aligned}</script><p>2.&emsp;再证 <script type="math/tex">\log_2n!\in \Omega(n\log_2n)</script></p><script type="math/tex; mode=display">\begin{aligned}&∵\ n!\ge (\frac n2)^\frac n2 \\&∴\ \log_2n!\ge\log_2(\frac n2)^\frac n2=\frac n2\log_2\frac n2=\frac n2\log_2n-\frac n2\log_22 \\&∵\ ∀n\gt4,\ \frac n2\log_22=\frac n4\log_24\lt\frac n4\log_2n \\&∴\ ∀n\gt4,\ \log_2n!\ge\frac n2\log_2n-\frac n4\log_2n=\frac 14n\log_2n \\&∴\ \log_2n!\in \Omega(n\log_2n)\end{aligned}</script><p>综上所述， <script type="math/tex">\log_2n!\in\Theta(n\log_2n)</script> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这是离散数学中一道关于算法渐进复杂度的证明题：求证 &lt;script type=&quot;math/tex&quot;&gt;\log_2n!\in\Theta(n\log_2n)&lt;/script&gt; 。&lt;br&gt;&amp;emsp;&amp;emsp;看了网上的一些证明，大多借助斯特林公式，即 &lt;script type=&quot;math/tex&quot;&gt;\lim\limits_{n\to+\infty}\frac{n!}{\sqrt{2\pi n}(\frac ne)^n}=1&lt;/script&gt; ，将 &lt;script type=&quot;math/tex&quot;&gt;n!&lt;/script&gt; 替换成同阶的 &lt;script type=&quot;math/tex&quot;&gt;\sqrt{2\pi n}(\frac ne)^n&lt;/script&gt; 进行证明。若不熟悉该公式，很难想到这种等价替换。在此给出一种比较朴素的证明方法。&lt;br&gt;
    
    </summary>
    
      <category term="学科" scheme="https://pcninja.cn/categories/%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="数学" scheme="https://pcninja.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="离散数学" scheme="https://pcninja.cn/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
      <category term="复杂度" scheme="https://pcninja.cn/tags/%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——游戏分组</title>
    <link href="https://pcninja.cn/2019/05/game-grouping/"/>
    <id>https://pcninja.cn/2019/05/game-grouping/</id>
    <published>2019-05-15T01:29:33.000Z</published>
    <updated>2019-05-18T04:01:17.803Z</updated>
    
    <content type="html"><![CDATA[<p><strong>游戏分组</strong><br>时间限制: 1000 ms<br>内存限制: 128 MB</p><p>为了活跃蒜厂的工作气氛，促进彼此间的友谊，蒜头君决定挑个阳光明媚的周末，带领同学们一起玩游戏。一共有 <code>n</code> 位同学要参加，编号为 <code>0</code> 到 <code>n - 1</code>。蒜头君要对这些同学进行分组，而且蒜头君已经知道哪两个同学之间是好友关系。为了让同学们都玩得开心，蒜头君决定最终的分组方案要将所有好友组合都被分在一组。<br>蒜头君现在知道有 <code>m</code> 对好友关系，需要注意的是，有可能一个同学有很多个好友，也有可能一个同学没有好友。为了让游戏更有趣，蒜头君希望最后分出的组数尽可能多。你能帮蒜头君算出来最多可以分成多少组么？<br><a id="more"></a><br><strong>输入格式：</strong><br>第一行输入两个数 <code>n</code> 和 <code>m</code>，1 ≤ <code>n</code>, <code>m</code> ≤ 1000000。<br>接下来输入 <code>m</code> 行，每行输入两个数 <code>a</code> 和 <code>b</code>，表示编号 <code>a</code> 和编号 <code>b</code> 的同学是好友关系，0 ≤ a, b ≤ <code>n</code> - 1。</p><p><strong>输出格式：</strong><br>输出为一行，表示最多可以分成多少组。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">0 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *father, *size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[n] != n)</span><br><span class="line">        father[n] = find(father[n]);    <span class="comment">//路径压缩</span></span><br><span class="line">    <span class="keyword">return</span> father[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> roota = find(a), rootb = find(b);</span><br><span class="line">    <span class="keyword">if</span>(roota == rootb)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(size[roota] &gt; size[rootb])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = roota;</span><br><span class="line">        roota = rootb;</span><br><span class="line">        rootb = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    father[roota] = rootb;    <span class="comment">//启发式合并（按集合大小）</span></span><br><span class="line">    size[rootb] += size[roota];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    father = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">    size = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b, num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    init(n);</span><br><span class="line">    num = n;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span>(merge(a, b))</span><br><span class="line">            num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;游戏分组&lt;/strong&gt;&lt;br&gt;时间限制: 1000 ms&lt;br&gt;内存限制: 128 MB&lt;/p&gt;
&lt;p&gt;为了活跃蒜厂的工作气氛，促进彼此间的友谊，蒜头君决定挑个阳光明媚的周末，带领同学们一起玩游戏。一共有 &lt;code&gt;n&lt;/code&gt; 位同学要参加，编号为 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;n - 1&lt;/code&gt;。蒜头君要对这些同学进行分组，而且蒜头君已经知道哪两个同学之间是好友关系。为了让同学们都玩得开心，蒜头君决定最终的分组方案要将所有好友组合都被分在一组。&lt;br&gt;蒜头君现在知道有 &lt;code&gt;m&lt;/code&gt; 对好友关系，需要注意的是，有可能一个同学有很多个好友，也有可能一个同学没有好友。为了让游戏更有趣，蒜头君希望最后分出的组数尽可能多。你能帮蒜头君算出来最多可以分成多少组么？&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="并查集" scheme="https://pcninja.cn/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="路径压缩" scheme="https://pcninja.cn/tags/%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="启发式合并" scheme="https://pcninja.cn/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>今天，致敬青春</title>
    <link href="https://pcninja.cn/2019/05/tribute-to-youth/"/>
    <id>https://pcninja.cn/2019/05/tribute-to-youth/</id>
    <published>2019-05-04T01:00:06.000Z</published>
    <updated>2019-05-06T07:36:00.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自 新浪微博 @人民日报</p></blockquote><p>&emsp;&emsp;青春，是一场场考试，是宽大的校服，是同桌的你和上铺的兄弟；更是青春追梦，成长担当，哪怕万人阻挡，也不曾投降的勇气和力量。青春不是年华，而是心境。它属于年轻人，更属于奋斗者。每一个为梦想拼尽全力的人，都有着青春的光芒。今天，五四青年节，追梦吧，青春！<br><a id="more"></a></p><center class="noBr">  <div class="myGroup">    <div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/1.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/2.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/3.jpg"></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/4.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/5.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/6.jpg"></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/7.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/8.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/9.jpg"></div></div></div></div>  </div></center><style type="text/css">  .noBr {    font-size: 0px;  }  .myGroup {    width: 70%;  }  .myGroup img {    margin-top: 0px !important;    margin-bottom: 0px !important;  }</style>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转自 新浪微博 @人民日报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;青春，是一场场考试，是宽大的校服，是同桌的你和上铺的兄弟；更是青春追梦，成长担当，哪怕万人阻挡，也不曾投降的勇气和力量。青春不是年华，而是心境。它属于年轻人，更属于奋斗者。每一个为梦想拼尽全力的人，都有着青春的光芒。今天，五四青年节，追梦吧，青春！&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://pcninja.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="转载" scheme="https://pcninja.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="青春" scheme="https://pcninja.cn/tags/%E9%9D%92%E6%98%A5/"/>
    
      <category term="五四运动一百周年" scheme="https://pcninja.cn/tags/%E4%BA%94%E5%9B%9B%E8%BF%90%E5%8A%A8%E4%B8%80%E7%99%BE%E5%91%A8%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>博客装修小记</title>
    <link href="https://pcninja.cn/2019/05/blog-decoration-notes/"/>
    <id>https://pcninja.cn/2019/05/blog-decoration-notes/</id>
    <published>2019-05-02T09:33:01.000Z</published>
    <updated>2019-05-03T03:22:09.855Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;五一小长假，身边的小伙伴大都奔赴各地领略大好河山，朋友圈里的各种照片看得我眼花缭乱。我赋闲在家，做自己喜欢做的事，放松之余也捯饬捯饬自己的小站。<br><a id="more"></a></p><h3 id="小站概况"><a href="#小站概况" class="headerlink" title="小站概况"></a>小站概况</h3><p>自2016年建站以来，先后经历了多次更换托管主机<small>（Hostinger → GitHub Pages → Coding Pages）</small>与域名<small>（potatochipsninja.tk → pcninja.tk → pcninja.cn）</small>，也从动态网站转型成了静态网站<small>（WordPress → Hexo）</small>，可谓风雨飘摇、命途多舛。尽管如此，小站的建设确确实实让我学习了许多前端方面的知识，同时也带给我不小的成就感。</p><h3 id="主要改动"><a href="#主要改动" class="headerlink" title="主要改动"></a>主要改动</h3><p>博客继续采用 Hexo 搭配 Next 主题，风格从原来的 <code>Pisces</code> 更换成了更具现代感的 <code>Gemini</code>，阴影的加入使得页面区块化更加显著。<br>加入了 Valine 评论系统，支持 <code>Markdown</code> 语法，与原有的文章阅读量统计整合在一块，一并存储在 LeanCloud。</p><h3 id="改动一览"><a href="#改动一览" class="headerlink" title="改动一览"></a>改动一览</h3><ul><li>字体：全局字体采用 <code>Noto Serif SC</code>，网站标题字体采用 <code>ZCOOL XiaoWei</code>，均来自 Google 字体库。为了优化访问速度，使用了 CDN（fonts.loli.net）。如果字体没有生效，请清除缓存后刷新网页</li><li>增加背景图片及背景不透明度</li><li>网站标题框及“阅读全文”按钮配色更改</li><li>侧边栏头像改为圆形，鼠标移入有旋转动画效果，点击可跳至主页</li><li>侧边栏社交链接改为仅有图标的简约风格</li><li>侧边栏加入知识共享许可协议 <code>BY-NC-SA</code> 声明图标，取消了文章底部的文字声明</li><li>返回页面顶部按钮由页面右下角移动到侧边栏底部，并显示阅读百分比</li><li>文章阅读量统计与 Valine 评论系统进行合并</li><li>页脚背景样式美化</li><li>页脚跳动的红色爱心（<span style="display: inline-block; margin: 0 5px; animation: iconAnimate 1.33s ease-in-out infinite;"><i class="fa fa-heart" style="color: #ff0000;"></i></span>）改为静止的灰色爱心（<span><i class="fa fa-heart" style="color: #808080;"></i></span>）<del>，期待它的重新跳动</del></li><li>页脚总访客量与总访问量显示风格改为数值居中，图标分列两侧<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3></li><li>有精力的时候从零写一个 Hexo 主题，尝试用 <code>PHP</code> 等编写动态博客程序（<strong>可能</strong>会是暑假）</li><li>扩充自己的技术栈，积极更新技术类博文</li><li>丰富博客内容，多读书，多记录生活，努力提升自身文学素养</li></ul><div class="image-size-50"><img src="/2019/05/blog-decoration-notes/image.png" title="2019继续加油"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;五一小长假，身边的小伙伴大都奔赴各地领略大好河山，朋友圈里的各种照片看得我眼花缭乱。我赋闲在家，做自己喜欢做的事，放松之余也捯饬捯饬自己的小站。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="https://pcninja.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="日记" scheme="https://pcninja.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://pcninja.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="网络" scheme="https://pcninja.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——地铁一日游</title>
    <link href="https://pcninja.cn/2019/04/one-day-metro-tour/"/>
    <id>https://pcninja.cn/2019/04/one-day-metro-tour/</id>
    <published>2019-04-22T08:13:25.000Z</published>
    <updated>2019-05-25T02:10:02.217Z</updated>
    
    <content type="html"><![CDATA[<p><strong>地铁一日游</strong><br>时间限制: 550 ms<br>内存限制: 64 MB</p><p>森森喜欢坐地铁。这个假期，他终于来到了传说中的地铁之城——魔都，打算好好过一把坐地铁的瘾！<br>魔都地铁的计价规则是：起步价 2 元，出发站与到达站的最短距离（即<strong>计费距离</strong>）每 K 公里增加 1 元车费。<br>例如取 <code>K</code> = 10，动安寺站离魔都绿桥站为 40 公里，则车费为 2 + 4 = 6 元。<br>为了获得最大的满足感，森森决定用以下的方式坐地铁：在某一站上车（不妨设为地铁站 <code>A</code>），则对于所有车费相同的到达站，森森只会在计费距离最远的站或线路末端站点出站，然后用森森美图 App 在站点外拍一张认证照，再按同样的方式前往下一个站点。<br>坐着坐着，森森突然好奇起来：在给定出发站的情况下（在出发时森森也会拍一张照），他的整个旅程中能够留下哪些站点的认证照？<br>地铁是铁路运输的一种形式，指在地下运行为主的城市轨道交通系统。一般来说，地铁由若干个站点组成，并有多条不同的线路双向行驶，可类比公交车，当两条或更多条线路经过同一个站点时，可进行<strong>换乘</strong>，更换自己所乘坐的线路。举例来说，魔都 1 号线和 2 号线都经过人民广场站，则乘坐 1 号线到达人民广场时就可以换乘到 2 号线前往 2 号线的各个站点。换乘不需出站（也拍不到认证照），因此森森乘坐地铁时换乘不受限制。<br><a id="more"></a><br><strong>输入格式：</strong><br>输入第一行是三个正整数 <code>N</code>、<code>M</code> 和 <code>K</code>，表示魔都地铁有 <code>N</code> 个车站 (1 ≤ <code>N</code> ≤ 200)，<code>M</code> 条线路 (1 ≤ <code>M</code> ≤ 1500)，最短距离每超过 <code>K</code> 公里 (1 ≤ <code>K</code> ≤ 10^6)，加 1 元车费。<br>接下来 <code>M</code> 行，每行由以下格式组成：<br>&lt;站点1&gt;&lt;空格&gt;&lt;距离&gt;&lt;空格&gt;&lt;站点2&gt;&lt;空格&gt;&lt;距离&gt;&lt;空格&gt;&lt;站点3&gt; … &lt;站点X-1&gt;&lt;空格&gt;&lt;距离&gt;&lt;空格&gt;&lt;站点X&gt;<br>其中站点是一个 1 到 <code>N</code> 的编号；两个站点编号之间的距离指两个站在该线路上的距离。两站之间距离是一个不大于 10^6 的正整数。一条线路上的站点互不相同。<br><strong>注意：</strong>两个站之间可能有多条直接连接的线路，且距离不一定相等。<br>再接下来有一个正整数 <code>Q</code> (1 ≤ <code>Q</code> ≤ 200)，表示森森尝试从 <code>Q</code> 个站点出发。<br>最后有 <code>Q</code> 行，每行一个正整数 <code>Xi</code>，表示森森尝试从编号为 <code>Xi</code> 的站点出发。</p><p><strong>输出格式：</strong><br>对于森森每个尝试的站点，输出一行若干个整数，表示能够到达的站点编号。站点编号从小到大排序。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6 2 6</span><br><span class="line">1 6 2 4 3 1 4</span><br><span class="line">5 6 2 6 6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 2 4 5 6</span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">1 2 4 5 6</span><br><span class="line">1 2 4 5 6</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, i, j, a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Init D</span></span><br><span class="line">    <span class="keyword">int</span> D[n][n];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            D[i][j] = (i == j ? <span class="number">0</span> : <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Get D</span></span><br><span class="line">    <span class="keyword">int</span> s1, s2, len, terminal[m*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s1);</span><br><span class="line">        s1--;</span><br><span class="line">        terminal[i*<span class="number">2</span>] = s1;</span><br><span class="line">        ch = getchar();</span><br><span class="line">        <span class="keyword">while</span>(ch != <span class="string">'\n'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;len, &amp;s2);</span><br><span class="line">            s2--;</span><br><span class="line">            <span class="keyword">if</span>(D[s1][s2] == <span class="number">-1</span> || D[s1][s2] &gt; len)</span><br><span class="line">            &#123;</span><br><span class="line">                D[s1][s2] = len;</span><br><span class="line">                D[s2][s1] = D[s1][s2];</span><br><span class="line">            &#125;</span><br><span class="line">            s1 = s2;</span><br><span class="line">            ch = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        terminal[i*<span class="number">2</span> + <span class="number">1</span>] = s1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Floyd</span></span><br><span class="line">    <span class="keyword">for</span>(a = <span class="number">0</span>; a &lt; n; ++a)</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span>(D[i][a] != <span class="number">-1</span> &amp;&amp; D[a][j] != <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">if</span>(D[i][j] == <span class="number">-1</span> || D[i][a] + D[a][j] &lt; D[i][j])</span><br><span class="line">                        D[i][j] = D[i][a] + D[a][j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Preprocess</span></span><br><span class="line">    <span class="keyword">int</span> canArr[n][n];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            canArr[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m*<span class="number">2</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span>(D[i][terminal[j]] != <span class="number">-1</span>)</span><br><span class="line">                canArr[i][terminal[j]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j != i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(D[i][j] == <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(a = <span class="number">0</span>; a &lt; n; ++a)</span><br><span class="line">                    <span class="keyword">if</span>(a != i &amp;&amp; a != j)</span><br><span class="line">                        <span class="keyword">if</span>(D[i][a] != <span class="number">-1</span> &amp;&amp; D[i][a] / k == D[i][j] / k &amp;&amp; D[i][a] &gt; D[i][j])</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(a == n)</span><br><span class="line">                    canArr[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Solve Problem</span></span><br><span class="line">    <span class="keyword">int</span> q, start, arr[n], <span class="built_in">queue</span>[n], head, tail, flag;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            arr[j] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;start);</span><br><span class="line">        arr[--start] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        head = <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>[<span class="number">0</span>] = start;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head &lt;= tail)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span>(!arr[j] &amp;&amp; canArr[<span class="built_in">queue</span>[head]][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">queue</span>[++tail] = j;</span><br><span class="line">                    arr[j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            head++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(arr[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;地铁一日游&lt;/strong&gt;&lt;br&gt;时间限制: 550 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;森森喜欢坐地铁。这个假期，他终于来到了传说中的地铁之城——魔都，打算好好过一把坐地铁的瘾！&lt;br&gt;魔都地铁的计价规则是：起步价 2 元，出发站与到达站的最短距离（即&lt;strong&gt;计费距离&lt;/strong&gt;）每 K 公里增加 1 元车费。&lt;br&gt;例如取 &lt;code&gt;K&lt;/code&gt; = 10，动安寺站离魔都绿桥站为 40 公里，则车费为 2 + 4 = 6 元。&lt;br&gt;为了获得最大的满足感，森森决定用以下的方式坐地铁：在某一站上车（不妨设为地铁站 &lt;code&gt;A&lt;/code&gt;），则对于所有车费相同的到达站，森森只会在计费距离最远的站或线路末端站点出站，然后用森森美图 App 在站点外拍一张认证照，再按同样的方式前往下一个站点。&lt;br&gt;坐着坐着，森森突然好奇起来：在给定出发站的情况下（在出发时森森也会拍一张照），他的整个旅程中能够留下哪些站点的认证照？&lt;br&gt;地铁是铁路运输的一种形式，指在地下运行为主的城市轨道交通系统。一般来说，地铁由若干个站点组成，并有多条不同的线路双向行驶，可类比公交车，当两条或更多条线路经过同一个站点时，可进行&lt;strong&gt;换乘&lt;/strong&gt;，更换自己所乘坐的线路。举例来说，魔都 1 号线和 2 号线都经过人民广场站，则乘坐 1 号线到达人民广场时就可以换乘到 2 号线前往 2 号线的各个站点。换乘不需出站（也拍不到认证照），因此森森乘坐地铁时换乘不受限制。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="Floyd" scheme="https://pcninja.cn/tags/Floyd/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——天梯地图</title>
    <link href="https://pcninja.cn/2019/04/high-ladder-map/"/>
    <id>https://pcninja.cn/2019/04/high-ladder-map/</id>
    <published>2019-04-22T07:53:35.000Z</published>
    <updated>2019-05-25T02:10:06.398Z</updated>
    
    <content type="html"><![CDATA[<p><strong>天梯地图</strong><br>时间限制: 300 ms<br>内存限制: 64 MB</p><p>本题要求你实现一个天梯赛专属在线地图，队员输入自己学校所在地和赛场地点后，该地图应该推荐两条路线：一条是最快到达路线；一条是最短距离的路线。题目保证对任意的查询请求，地图上都至少存在一条可达路线。<br><a id="more"></a><br><strong>输入格式：</strong><br>输入在第一行给出两个正整数<code>N</code>（2 ≤ <code>N</code> ≤ 500）和<code>M</code>，分别为地图中所有标记地点的个数和连接地点的道路条数。随后<code>M</code>行，每行按如下格式给出一条道路的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V1 V2 one-way length time</span><br></pre></td></tr></table></figure></p><p>其中<code>V1</code>和<code>V2</code>是道路的两个端点的编号（从0到<code>N</code>-1）；如果该道路是从<code>V1</code>到<code>V2</code>的单行线，则<code>one-way</code>为1，否则为0；<code>length</code>是道路的长度；<code>time</code>是通过该路所需要的时间。最后给出一对起点和终点的编号。</p><p><strong>输出格式：</strong><br>首先按下列格式输出最快到达的时间<code>T</code>和用节点编号表示的路线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time = T: 起点 =&gt; 节点1 =&gt; ... =&gt; 终点</span><br></pre></td></tr></table></figure></p><p>然后在下一行按下列格式输出最短距离<code>D</code>和用节点编号表示的路线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Distance = D: 起点 =&gt; 节点1 =&gt; ... =&gt; 终点</span><br></pre></td></tr></table></figure></p><p>如果最快到达路线不唯一，则输出几条最快路线中最短的那条，题目保证这条路线是唯一的。而如果最短距离的路线不唯一，则输出途径节点数最少的那条，题目保证这条路线是唯一的。</p><p>如果这两条路线是完全一样的，则按下列格式输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time = T; Distance = D: 起点 =&gt; 节点1 =&gt; ... =&gt; 终点</span><br></pre></td></tr></table></figure></p><p><strong>输入样例1：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">10 15</span><br><span class="line">0 1 0 1 1</span><br><span class="line">8 0 0 1 1</span><br><span class="line">4 8 1 1 1</span><br><span class="line">5 4 0 2 3</span><br><span class="line">5 9 1 1 4</span><br><span class="line">0 6 0 1 1</span><br><span class="line">7 3 1 1 2</span><br><span class="line">8 3 1 1 2</span><br><span class="line">2 5 0 2 2</span><br><span class="line">2 1 1 1 1</span><br><span class="line">1 5 0 1 3</span><br><span class="line">1 4 0 1 1</span><br><span class="line">9 7 1 1 3</span><br><span class="line">3 1 0 2 5</span><br><span class="line">6 3 1 2 1</span><br><span class="line">5 3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time = 6: 5 =&gt; 4 =&gt; 8 =&gt; 3</span><br><span class="line">Distance = 3: 5 =&gt; 1 =&gt; 3</span><br></pre></td></tr></table></figure></p><p><strong>输入样例2：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">7 9</span><br><span class="line">0 4 1 1 1</span><br><span class="line">1 6 1 3 1</span><br><span class="line">2 6 1 1 1</span><br><span class="line">2 5 1 2 2</span><br><span class="line">3 0 0 1 1</span><br><span class="line">3 1 1 3 1</span><br><span class="line">3 2 1 2 1</span><br><span class="line">4 5 0 2 2</span><br><span class="line">6 5 1 2 1</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time = 3; Distance = 4: 3 =&gt; 2 =&gt; 5</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Target;</span><br><span class="line">    <span class="keyword">int</span> Length;</span><br><span class="line">    <span class="keyword">int</span> Time;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> *<span class="title">NextEdge</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> *<span class="title">Head</span>;</span></span><br><span class="line">    <span class="keyword">int</span> Known;</span><br><span class="line">    <span class="keyword">int</span> Dist;</span><br><span class="line">    <span class="keyword">int</span> PathDist;</span><br><span class="line">    <span class="keyword">int</span> Time;</span><br><span class="line">    <span class="keyword">int</span> PathTime;</span><br><span class="line">    <span class="keyword">int</span> VertexNums;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadGraph</span><span class="params">(struct Vertex *G, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin, target, oneWay, length, time;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        G[i].Head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &amp;begin, &amp;target, &amp;oneWay, &amp;length, &amp;time);</span><br><span class="line">        p = G[begin].Head;</span><br><span class="line">        G[begin].Head = (struct Edge *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Edge));</span><br><span class="line">        G[begin].Head-&gt;Target = target;</span><br><span class="line">        G[begin].Head-&gt;Length = length;</span><br><span class="line">        G[begin].Head-&gt;Time = time;</span><br><span class="line">        G[begin].Head-&gt;NextEdge = p;</span><br><span class="line">        <span class="keyword">if</span>(!oneWay)</span><br><span class="line">        &#123;</span><br><span class="line">            p = G[target].Head;</span><br><span class="line">            G[target].Head = (struct Edge *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Edge));</span><br><span class="line">            G[target].Head-&gt;Target = begin;</span><br><span class="line">            G[target].Head-&gt;Length = length;</span><br><span class="line">            G[target].Head-&gt;Time = time;</span><br><span class="line">            G[target].Head-&gt;NextEdge = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(struct Vertex *G, <span class="keyword">int</span> n, <span class="keyword">int</span> begin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v, vDist, vTime, vNums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        G[i].Known = <span class="number">0</span>;</span><br><span class="line">        G[i].Dist = G[i].Time = G[i].PathDist = G[i].PathTime = G[i].VertexNums = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G[begin].Dist = G[begin].Time = G[begin].VertexNums = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v = vTime = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span>(!G[i].Known &amp;&amp; G[i].Time != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(v == <span class="number">-1</span> || G[i].Time &lt; vTime)</span><br><span class="line">                &#123;</span><br><span class="line">                    vTime = G[i].Time;</span><br><span class="line">                    vDist = G[i].Dist;</span><br><span class="line">                    v = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(G[i].Time == vTime &amp;&amp; G[i].Dist &lt; vDist)</span><br><span class="line">                &#123;</span><br><span class="line">                    vDist = G[i].Dist;</span><br><span class="line">                    v = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(v == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        G[v].Known = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(struct Edge *p = G[v].Head; p; p = p-&gt;NextEdge)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!G[p-&gt;Target].Known)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(G[p-&gt;Target].Time == <span class="number">-1</span> || G[v].Time + p-&gt;Time &lt; G[p-&gt;Target].Time)</span><br><span class="line">                &#123;</span><br><span class="line">                    G[p-&gt;Target].Time = G[v].Time + p-&gt;Time;</span><br><span class="line">                    G[p-&gt;Target].Dist = G[v].Dist + p-&gt;Length;</span><br><span class="line">                    G[p-&gt;Target].PathTime = v;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((G[v].Time + p-&gt;Time == G[p-&gt;Target].Time) &amp;&amp; (G[v].Dist + p-&gt;Length &lt; G[p-&gt;Target].Dist))</span><br><span class="line">                &#123;</span><br><span class="line">                    G[p-&gt;Target].Dist = G[v].Dist + p-&gt;Length;</span><br><span class="line">                    G[p-&gt;Target].PathTime = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        G[i].Known = <span class="number">0</span>;</span><br><span class="line">        G[i].Dist = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G[begin].Dist = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v = vDist = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span>(!G[i].Known &amp;&amp; G[i].Dist != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(v == <span class="number">-1</span> || G[i].Dist &lt; vDist)</span><br><span class="line">                &#123;</span><br><span class="line">                    vDist = G[i].Dist;</span><br><span class="line">                    vNums = G[i].VertexNums;</span><br><span class="line">                    v = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(G[i].Dist == vDist &amp;&amp; G[i].VertexNums &lt; vNums)</span><br><span class="line">                &#123;</span><br><span class="line">                    vNums = G[i].VertexNums;</span><br><span class="line">                    v = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(v == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        G[v].Known = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(struct Edge *p = G[v].Head; p; p = p-&gt;NextEdge)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!G[p-&gt;Target].Known)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(G[p-&gt;Target].Dist == <span class="number">-1</span> || G[v].Dist + p-&gt;Length &lt; G[p-&gt;Target].Dist)</span><br><span class="line">                &#123;</span><br><span class="line">                    G[p-&gt;Target].Dist = G[v].Dist + p-&gt;Length;</span><br><span class="line">                    G[p-&gt;Target].VertexNums = G[v].VertexNums + <span class="number">1</span>;</span><br><span class="line">                    G[p-&gt;Target].PathDist = v;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((G[v].Dist + p-&gt;Length == G[p-&gt;Target].Dist) &amp;&amp; (G[v].VertexNums + <span class="number">1</span> &lt; G[p-&gt;Target].VertexNums))</span><br><span class="line">                &#123;</span><br><span class="line">                    G[p-&gt;Target].VertexNums = G[v].VertexNums + <span class="number">1</span>;</span><br><span class="line">                    G[p-&gt;Target].PathDist = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(struct Vertex *G, <span class="keyword">int</span> end, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[end].PathDist != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PrintPath(G, G[end].PathDist, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" =&gt; %d"</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[end].PathTime != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PrintPath(G, G[end].PathTime, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" =&gt; %d"</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(struct Vertex *G, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = end;</span><br><span class="line">    <span class="keyword">while</span>(i != begin)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i].PathDist != G[i].PathTime)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i = G[i].PathDist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == begin)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Time = %d; Distance = %d: %d"</span>, G[end].Time, G[end].Dist, begin);</span><br><span class="line">        PrintPath(G, end, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Time = %d: %d"</span>, G[end].Time, begin);</span><br><span class="line">        PrintPath(G, end, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nDistance = %d: %d"</span>, G[end].Dist, begin);</span><br><span class="line">        PrintPath(G, end, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, begin, end;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span> <span class="title">G</span>[<span class="title">n</span>];</span></span><br><span class="line">    ReadGraph(G, n, m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;begin, &amp;end);</span><br><span class="line">    Dijkstra(G, n, begin);</span><br><span class="line">    Output(G, begin, end);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;天梯地图&lt;/strong&gt;&lt;br&gt;时间限制: 300 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;本题要求你实现一个天梯赛专属在线地图，队员输入自己学校所在地和赛场地点后，该地图应该推荐两条路线：一条是最快到达路线；一条是最短距离的路线。题目保证对任意的查询请求，地图上都至少存在一条可达路线。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="Dijkstra" scheme="https://pcninja.cn/tags/Dijkstra/"/>
    
  </entry>
  
</feed>
