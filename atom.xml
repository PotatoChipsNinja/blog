<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>薯片忍者的小站</title>
  
  <subtitle>今天的故事 是明天的回忆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pcninja.cn/"/>
  <updated>2019-07-25T12:36:14.533Z</updated>
  <id>https://pcninja.cn/</id>
  
  <author>
    <name>薯片忍者</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>virtualenv创建Python虚拟环境时抛出UnicodeDecodeError异常的解决</title>
    <link href="https://pcninja.cn/2019/07/solution-of-UnicodeDecodeError-thrown-by-virtualenv/"/>
    <id>https://pcninja.cn/2019/07/solution-of-UnicodeDecodeError-thrown-by-virtualenv/</id>
    <published>2019-07-25T12:04:12.000Z</published>
    <updated>2019-07-25T12:36:14.533Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在通过pip安装TensorFlow时遇到了一个问题，当执行<code>virtualenv --system-site-packages -p python ./venv</code>创建新的虚拟环境时会抛出如下异常：<a id="more"></a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 939, in call_subprocess</span><br><span class="line">    line = line.decode(encoding)</span><br><span class="line">UnicodeDecodeError: 'utf-8' codec can't decode byte 0xca in position 38: invalid continuation byte</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 2635, in &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 870, in main</span><br><span class="line">    symlink=options.symlink,</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 1173, in create_environment</span><br><span class="line">    install_wheel(to_install, py_executable, search_dirs, download=download)</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 1019, in install_wheel</span><br><span class="line">    _install_wheel_with_search_dir(download, project_names, py_executable, search_dirs)</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 1110, in _install_wheel_with_search_dir</span><br><span class="line">    call_subprocess(cmd, show_stdout=False, extra_env=env, stdin=script)</span><br><span class="line">  File "e:\python\lib\site-packages\virtualenv.py", line 941, in call_subprocess</span><br><span class="line">    line = line.decode(fs_encoding)</span><br><span class="line">UnicodeDecodeError: 'utf-8' codec can't decode byte 0xca in position 38: invalid continuation byte</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;经过一番研究，原来出现异常的原因是调用<code>decode()</code>方法的<code>errors</code>参数为默认值<code>&quot;strict&quot;</code>，即任何编码错误都会引发UnicodeDecodeError，将其更改为<code>&quot;ignore&quot;</code>即可忽略错误。具体修改如下：<br>&emsp;&emsp;根据异常信息，将Python安装目录下的<code>.\Lib\site-packages\virtualenv.py</code>的第939行修改为<code>line = line.decode(encoding, &quot;ignore&quot;)</code>，即增加一个<code>&quot;ignore&quot;</code>参数。<br>再次尝试创建虚拟环境，此时就不会抛出异常了：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Running virtualenv with interpreter E:\Python\python.exe</span><br><span class="line">Already using interpreter E:\Python\python.exe</span><br><span class="line">Using base prefix 'E:\\Python'</span><br><span class="line">New python executable in D:\TensorFlow\venv\Scripts\python.exe</span><br><span class="line">Installing setuptools, pip, wheel...</span><br><span class="line">done.</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这时我们就拥有了一套独立的Python运行环境，不用担心污染主环境了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;在通过pip安装TensorFlow时遇到了一个问题，当执行&lt;code&gt;virtualenv --system-site-packages -p python ./venv&lt;/code&gt;创建新的虚拟环境时会抛出如下异常：
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="virtualenv" scheme="https://pcninja.cn/tags/virtualenv/"/>
    
      <category term="Python" scheme="https://pcninja.cn/tags/Python/"/>
    
      <category term="编码" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>【备忘】 SS代理服务器配置及优化</title>
    <link href="https://pcninja.cn/2019/07/configuration-and-optimization-of-ss-proxy-server/"/>
    <id>https://pcninja.cn/2019/07/configuration-and-optimization-of-ss-proxy-server/</id>
    <published>2019-07-15T12:41:21.000Z</published>
    <updated>2019-07-15T13:36:14.392Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;由于Vultr日本节点大量被墙，所以被迫转投DigitalOcean，最便宜的是5刀一个月，但首充5刀后会送50刀，再加上Github教育礼包里包含的50刀优惠（需要验证教育邮箱、上传学生证照片），所以算下来几乎可以白嫖两年，岂不美滋滋。美中不足是DigitalOcean的系统快照占用的存储空间是要另付费的，所以每次换IP开新机就需要重新配置代理服务器，这里简单记录一下流程和命令，方便以后复制。<br><a id="more"></a></p><blockquote><p>以Ubuntu 18.04搭建SS服务为例，如果今后SS情势不好可能会换用V2Ray</p></blockquote><h2 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h2><p>项目地址：<a href="https://github.com/shadowsocks/shadowsocks/tree/master" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks/tree/master</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 从源更新软件列表</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span> 安装pip</span><br><span class="line">apt-get install python-pip</span><br><span class="line"><span class="meta">#</span> pip安装SS</span><br><span class="line">pip install git+https://github.com/shadowsocks/shadowsocks.git@master</span><br></pre></td></tr></table></figure></p><p>安装完成后可以建两个脚本<code>start.sh</code>、<code>stop.sh</code>方便控制服务开关（或编写json配置文件，反而麻烦）<br>start.sh：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -p 端口 -k 密码 -m aes-256-cfb --user nobody -d start</span><br></pre></td></tr></table></figure></p><p>stop.sh：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver -d stop</span><br></pre></td></tr></table></figure></p><p>最后还要给这两个脚本赋予执行权限<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x start.sh stop.sh    # 或直接chmod 777</span><br></pre></td></tr></table></figure></p><p>开启服务之前可以做以下优化，提高带宽利用率</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>首先按照官方Wiki上的教程进行优化，地址：<a href="https://github.com/shadowsocks/shadowsocks/wiki/Optimizing-Shadowsocks" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks/wiki/Optimizing-Shadowsocks</a><br>创建<code>/etc/sysctl.d/local.conf</code>并写入以下配置：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> max open files</span><br><span class="line">fs.file-max = 51200</span><br><span class="line"><span class="meta">#</span> max read buffer</span><br><span class="line">net.core.rmem_max = 67108864</span><br><span class="line"><span class="meta">#</span> max write buffer</span><br><span class="line">net.core.wmem_max = 67108864</span><br><span class="line"><span class="meta">#</span> default read buffer</span><br><span class="line">net.core.rmem_default = 65536</span><br><span class="line"><span class="meta">#</span> default write buffer</span><br><span class="line">net.core.wmem_default = 65536</span><br><span class="line"><span class="meta">#</span> max processor input queue</span><br><span class="line">net.core.netdev_max_backlog = 4096</span><br><span class="line"><span class="meta">#</span> max backlog</span><br><span class="line">net.core.somaxconn = 4096</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> resist SYN flood attacks</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"><span class="meta">#</span> reuse timewait sockets when safe</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"><span class="meta">#</span> turn off fast timewait sockets recycling</span><br><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line"><span class="meta">#</span> short FIN timeout</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"><span class="meta">#</span> short keepalive time</span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line"><span class="meta">#</span> outbound port range</span><br><span class="line">net.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line"><span class="meta">#</span> max SYN backlog</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 4096</span><br><span class="line"><span class="meta">#</span> max timewait sockets held by system simultaneously</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line"><span class="meta">#</span> turn on TCP Fast Open on both client and server side</span><br><span class="line">net.ipv4.tcp_fastopen = 3</span><br><span class="line"><span class="meta">#</span> TCP receive buffer</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</span><br><span class="line"><span class="meta">#</span> TCP write buffer</span><br><span class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</span><br><span class="line"><span class="meta">#</span> turn on path MTU discovery</span><br><span class="line">net.ipv4.tcp_mtu_probing = 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> for high-latency network</span><br><span class="line">net.ipv4.tcp_congestion_control = hybla</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> for low-latency network, use cubic instead</span><br><span class="line"><span class="meta">#</span> net.ipv4.tcp_congestion_control = cubic</span><br></pre></td></tr></table></figure></p><p>最后的<code>net.ipv4.tcp_congestion_control</code>选择<code>hybla</code>还是<code>cubic</code>取决于服务器延迟的高低<br>然后加载我们写好的配置文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl --system</span><br></pre></td></tr></table></figure></p><p>接下来是启用TCP BBR拥塞控制算法，可以用来取代ServerSpeeder<br>已经有人做好了傻瓜式脚本，我们只需要根据提示操作：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure></p><p>使用<code>lsmod | grep bbr</code>查看系统模块，若返回<code>tcp_bbr</code>说明BBR已启动</p><p>这时我们就可以运行<code>start.sh</code>，开启代理服务，进行科学上网了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;由于Vultr日本节点大量被墙，所以被迫转投DigitalOcean，最便宜的是5刀一个月，但首充5刀后会送50刀，再加上Github教育礼包里包含的50刀优惠（需要验证教育邮箱、上传学生证照片），所以算下来几乎可以白嫖两年，岂不美滋滋。美中不足是DigitalOcean的系统快照占用的存储空间是要另付费的，所以每次换IP开新机就需要重新配置代理服务器，这里简单记录一下流程和命令，方便以后复制。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="https://pcninja.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Linux" scheme="https://pcninja.cn/tags/Linux/"/>
    
      <category term="服务器" scheme="https://pcninja.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="代理" scheme="https://pcninja.cn/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>写在十八岁的最后一天</title>
    <link href="https://pcninja.cn/2019/07/on-my-last-day-of-eighteen/"/>
    <id>https://pcninja.cn/2019/07/on-my-last-day-of-eighteen/</id>
    <published>2019-07-07T13:09:47.000Z</published>
    <updated>2019-07-07T13:26:12.105Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;十八岁，过的可真快，转眼就到了最后一天，以至于我还没反应过来。这就好比，在看一场精彩绝伦的足球赛时，往往会觉得上半场怎么这么快就结束了。而我的十八岁，虽称不上精彩，但也足够充实，或者说，只是单纯的忙碌，忙碌到这一年里发生的许多事我都快忘却了，所以我才要在这儿记下那些快要忘却的事，也算是对自己的十八岁做个简要的小结吧。<br><a id="more"></a><br>&emsp;&emsp;如果用一个词来总结这一年的话，我想应该是五味杂陈吧，因为这一年里，我哭过，痛过，累过，当然，也笑过。在度过了一个安逸的暑假之后，我开启了大学之旅，第一学期可以说是平淡无奇的四个月——很快我就适应了大学里的生活节奏，接着就是在上课、作业、游戏中轮回，周而复始。除了基本的课业知识，没有任何长进，虽然成绩还不错，但我对那个学期是不满意的，因为我虚度了四个月的时光。<br>&emsp;&emsp;浪费就会受到惩罚，这是颠扑不破的真理。很快，惩罚就降临了。我别无选择，只得默默接受。接下来的寒假对我来说无疑是煎熬的，当然，也有痛定思痛、扪心自问。<br>&emsp;&emsp;在假期临近结束之际，我做出了让我自己为之骄傲的决定，我遵从了自己的内心，提交了转专业申请，向自己的热爱与理想迈出了一大步。这一次，我终于没再辜负你，也没再辜负自己，这就是我为之骄傲的原因。<br>&emsp;&emsp;第二学期，我体验到了从未有过的忙碌与充实，大大小小的事务等待着我去一一处理，一个个抉择与挑战摆在我面前。这个学期，我参加了ACM校赛，见识了那些高水平选手的风采，让我深刻体会到天外有天，人外有人。我正视到自己的差距，意识到此刻开始追赶并不是一个明智的选择，ACM竞赛也并非我所认为的计算机科学的最好体现。正所谓条条大路通罗马，我需要尽早找到自己真正感兴趣的方向，追寻我所憧憬的计算机科学。<br>&emsp;&emsp;这一年，也是我自信心大幅提升的一年。我向自己证明了我的能力：第一学期综合成绩排名18/808，转入计科实验班后排名3/55，进入火花空间创客社团技术组，担任过一次技术沙龙的主讲人，带领宿舍全员设计开发寻物微信小程序……这些成绩告诉我，我不必自卑，无论在哪，我都能够站稳脚跟、发挥自己的作用、实现自己的价值。<br>&emsp;&emsp;人际交往方面，我倒是没有什么变化：不大不小的朋友圈，几个挚友，一个念念不忘的人，没有树敌。偶尔会感到孤独，但孤独是人生的必修课，我想这样就挺好。<br>&emsp;&emsp;这学期有位老师的一段话引发了我的思考：“科学是和人们的生活不相干的东西，而造福人类的是技术”。一开始，我对这种说法嗤之以鼻，心想科学怎么会和人们无关呢，但仔细想想，这种说法其实不无道理，科学与技术相辅相成——科学是技术的前提，而技术是科学的实现，因此科学对生活的影响是间接的，技术是直接的。我认为科学之于技术好比世界观之于方法论：方法论真正左右我们的行为，而决定方法论的却是世界观。<br>&emsp;&emsp;对科学与技术的思考让我对未来感到有些迷茫。如果你在十年前问我未来的职业理想是什么，我也许会给出和大部分孩子一样的答案：科学家，当然，这是一个极其笼统的回答；如果你在三年前问我同样的问题，我会毫不犹豫的回答你：计算机科学家；但如果你现在再来问我，我会犹豫，因为也许技术从业者会为这个社会创造更大的价值。这样的迷茫可能会持续一段时间，在我找到答案之前，我需要不断培养自己的计算思维、扩充自己的技术栈，尽可能做到理论与实践并行。<br>&emsp;&emsp;还有三个小时，我的十八岁就要过去了，竟有些伤感。十八岁，有太多的始料未及，此后，再不会有八月瓢泼大雨里的那种感动，再不会有一月寒风凛冽中的那种悲痛。时间会冲淡一切，现在需要我做的，就是以更好的态度，迎接十九岁的时空旅行。<br>&emsp;&emsp;薯片忍者，生日快乐！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;十八岁，过的可真快，转眼就到了最后一天，以至于我还没反应过来。这就好比，在看一场精彩绝伦的足球赛时，往往会觉得上半场怎么这么快就结束了。而我的十八岁，虽称不上精彩，但也足够充实，或者说，只是单纯的忙碌，忙碌到这一年里发生的许多事我都快忘却了，所以我才要在这儿记下那些快要忘却的事，也算是对自己的十八岁做个简要的小结吧。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://pcninja.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日记" scheme="https://pcninja.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://pcninja.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="人生" scheme="https://pcninja.cn/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="情感" scheme="https://pcninja.cn/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构考试——链表去重</title>
    <link href="https://pcninja.cn/2019/06/linked-list-duplicate-removal/"/>
    <id>https://pcninja.cn/2019/06/linked-list-duplicate-removal/</id>
    <published>2019-06-17T13:53:07.000Z</published>
    <updated>2019-06-17T14:02:21.531Z</updated>
    
    <content type="html"><![CDATA[<p><strong>链表去重</strong><br>时间限制: 400 ms<br>内存限制: 64 MB</p><p>给定一个带整数键值的链表 L，你需要把其中绝对值重复的键值结点删掉。即对每个键值 K，只有第一个绝对值等于 K 的结点被保留。同时，所有被删除的结点须被保存在另一个链表上。例如给定 L 为 21→-15→-15→-7→15，你需要输出去重后的链表 21→-15→-7，还有被删除的链表 -15→15。<br><a id="more"></a><br><strong>输入格式：</strong><br>输入在第一行给出 L 的第一个结点的地址和一个正整数 N（≤10^5，为结点总数）。一个结点的地址是非负的 5 位整数，空地址 NULL 用 -1 来表示。<br>随后 N 行，每行按以下格式描述一个结点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址 键值 下一个结点</span><br></pre></td></tr></table></figure></p><p>其中<code>地址</code>是该结点的地址，<code>键值</code>是绝对值不超过10^4的整数，下一个结点是下个结点的地址。</p><p><strong>输出格式：</strong><br>首先输出去重后的链表，然后输出被删除的链表。每个结点占一行，按输入的格式输出。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00100 5</span><br><span class="line">99999 -7 87654</span><br><span class="line">23854 -15 00000</span><br><span class="line">87654 15 -1</span><br><span class="line">00000 -15 99999</span><br><span class="line">00100 21 23854</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00100 21 23854</span><br><span class="line">23854 -15 99999</span><br><span class="line">99999 -7 -1</span><br><span class="line">00000 -15 87654</span><br><span class="line">87654 15 -1</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125; ram[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> exist[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start, n, addr, val, next;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;start, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;addr, &amp;val, &amp;next);</span><br><span class="line">        ram[addr].val = val;</span><br><span class="line">        ram[addr].next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a[n], na = <span class="number">1</span>, b[n], nb = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>] = start;</span><br><span class="line">    exist[<span class="built_in">abs</span>(ram[start].val)] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = ram[start].next; i != <span class="number">-1</span>; i = ram[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!exist[<span class="built_in">abs</span>(ram[i].val)])</span><br><span class="line">        &#123;</span><br><span class="line">            exist[<span class="built_in">abs</span>(ram[i].val)]++;</span><br><span class="line">            a[na++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b[nb++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; na; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d %d "</span>, a[i], ram[a[i]].val);</span><br><span class="line">        <span class="keyword">if</span>(i == na<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%05d\n"</span>, a[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nb; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d %d "</span>, b[i], ram[b[i]].val);</span><br><span class="line">        <span class="keyword">if</span>(i == nb<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%05d\n"</span>, b[i+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;链表去重&lt;/strong&gt;&lt;br&gt;时间限制: 400 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;给定一个带整数键值的链表 L，你需要把其中绝对值重复的键值结点删掉。即对每个键值 K，只有第一个绝对值等于 K 的结点被保留。同时，所有被删除的结点须被保存在另一个链表上。例如给定 L 为 21→-15→-15→-7→15，你需要输出去重后的链表 21→-15→-7，还有被删除的链表 -15→15。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="链表" scheme="https://pcninja.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="Hash" scheme="https://pcninja.cn/tags/Hash/"/>
    
  </entry>
  
  <entry>
    <title>数据结构考试——关于堆的判断</title>
    <link href="https://pcninja.cn/2019/06/judgment-of-heap/"/>
    <id>https://pcninja.cn/2019/06/judgment-of-heap/</id>
    <published>2019-06-17T13:31:35.000Z</published>
    <updated>2019-06-17T14:03:54.027Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关于堆的判断</strong><br>时间限制: 400 ms<br>内存限制: 64 MB</p><p>将一系列给定数字顺序插入一个初始为空的小顶堆<code>H[]</code>。随后判断一系列相关命题是否为真。命题分下列几种：</p><ul><li><code>x is the root</code>：<code>x</code>是根结点；</li><li><code>x and y are siblings</code>：<code>x</code>和<code>y</code>是兄弟结点；</li><li><code>x is the parent of y</code>：<code>x</code>是<code>y</code>的父结点；</li><li><code>x is a child of y</code>：<code>x</code>是<code>y</code>的一个子结点。</li></ul><a id="more"></a><p><strong>输入格式：</strong><br>每组测试第1行包含2个正整数<code>N</code>（≤ 1000）和<code>M</code>（≤ 20），分别是插入元素的个数、以及需要判断的命题数。下一行给出区间[−10000,10000]内的<code>N</code>个要被插入一个初始为空的小顶堆的整数。之后<code>M</code>行，每行给出一个命题。题目保证命题中的结点键值都是存在的。</p><p><strong>输出格式：</strong><br>对输入的每个命题，如果其为真，则在一行中输出<code>T</code>，否则输出<code>F</code>。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">46 23 26 24 10</span><br><span class="line">24 is the root</span><br><span class="line">26 and 23 are siblings</span><br><span class="line">46 is the parent of 23</span><br><span class="line">23 is a child of 10</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F</span><br><span class="line">T</span><br><span class="line">F</span><br><span class="line">T</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> H[<span class="number">1005</span>], ind[<span class="number">20005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adj</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span>    <span class="comment">//向下调整</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc = H[start];</span><br><span class="line">    <span class="keyword">int</span> s = start;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = start * <span class="number">2</span>; j &lt;= end; j *= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j &lt; end &amp;&amp; H[j+<span class="number">1</span>] &lt; H[j])</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span>(rc &gt; H[j])</span><br><span class="line">        &#123;</span><br><span class="line">            H[s] = H[j];</span><br><span class="line">            s = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    H[s] = rc;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;H[i+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = (i+<span class="number">1</span>)/<span class="number">2</span>; j &gt; <span class="number">0</span>; --j)    <span class="comment">//每次插入后都需要向上调整成小根堆</span></span><br><span class="line">            adj(j, i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存储索引</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ind[H[i+<span class="number">1</span>] + <span class="number">10000</span>] = i+<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a, b, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> comm[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;a, comm);</span><br><span class="line">        <span class="keyword">if</span>(comm[<span class="number">0</span>] == <span class="string">'a'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%*s%*s"</span>, &amp;b);</span><br><span class="line">            <span class="keyword">if</span>(ind[a + <span class="number">10000</span>] / <span class="number">2</span> == ind[b + <span class="number">10000</span>] / <span class="number">2</span>)</span><br><span class="line">                ans = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, comm);</span><br><span class="line">            <span class="keyword">if</span>(comm[<span class="number">0</span>] == <span class="string">'a'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%*s%*s%d"</span>, &amp;b);</span><br><span class="line">                <span class="keyword">if</span>(ind[a + <span class="number">10000</span>] / <span class="number">2</span> == ind[b + <span class="number">10000</span>])</span><br><span class="line">                    ans = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>, comm);</span><br><span class="line">                <span class="keyword">if</span>(comm[<span class="number">0</span>] == <span class="string">'r'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ind[a + <span class="number">10000</span>] == <span class="number">1</span>)</span><br><span class="line">                        ans = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%*s%d"</span>, &amp;b);</span><br><span class="line">                    <span class="keyword">if</span>(ind[b + <span class="number">10000</span>] / <span class="number">2</span> == ind[a + <span class="number">10000</span>])</span><br><span class="line">                        ans = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, ans ? <span class="string">'T'</span> : <span class="string">'F'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;关于堆的判断&lt;/strong&gt;&lt;br&gt;时间限制: 400 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;将一系列给定数字顺序插入一个初始为空的小顶堆&lt;code&gt;H[]&lt;/code&gt;。随后判断一系列相关命题是否为真。命题分下列几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x is the root&lt;/code&gt;：&lt;code&gt;x&lt;/code&gt;是根结点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x and y are siblings&lt;/code&gt;：&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;是兄弟结点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x is the parent of y&lt;/code&gt;：&lt;code&gt;x&lt;/code&gt;是&lt;code&gt;y&lt;/code&gt;的父结点；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x is a child of y&lt;/code&gt;：&lt;code&gt;x&lt;/code&gt;是&lt;code&gt;y&lt;/code&gt;的一个子结点。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="堆" scheme="https://pcninja.cn/tags/%E5%A0%86/"/>
    
      <category term="二叉树" scheme="https://pcninja.cn/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="最小堆" scheme="https://pcninja.cn/tags/%E6%9C%80%E5%B0%8F%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——最大数</title>
    <link href="https://pcninja.cn/2019/05/maxnumber/"/>
    <id>https://pcninja.cn/2019/05/maxnumber/</id>
    <published>2019-05-25T02:04:44.000Z</published>
    <updated>2019-05-25T02:18:15.951Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最大数</strong><br>时间限制: 1000 ms<br>内存限制: 128 MB</p><p>现在请求你维护一个数列，要求提供以下两种操作：<br>1、 查询操作。<br>语法：<code>Q L</code><br>功能：查询当前数列中末尾<code>L</code>个数中的最大的数，并输出这个数的值。<br>限制：<code>L</code>不超过当前数列的长度。(<code>L</code> &gt; 0)<br>2、 插入操作。<br>语法：<code>A n</code><br>功能：将<code>n</code>加上<code>t</code>，其中<code>t</code>是最近一次查询操作的答案（如果还未执行过查询操作，则<code>t</code> = 0)，并将所得结果对一个固定的常数<code>D</code>取模，将所得答案插入到数列的末尾。<br>限制：<code>n</code>是整数（可能为负数）并且在长整范围内。</p><p>注意：初始时数列是空的，没有一个数。<br><a id="more"></a><br><strong>输入格式：</strong><br>第一行两个整数，<code>M</code>和<code>D</code>，其中MM表示操作的个数(<code>M</code> ≤ 200,000)，<code>D</code>如上文中所述，满足(0 &lt; <code>D</code> &lt; 2,000,000,000)<br>接下来的<code>M</code>行，每行一个字符串，描述一个具体的操作。语法如上文所述。</p><p><strong>输出格式：</strong><br>对于每一个查询操作，你应该按照顺序依次输出结果，每个结果占一行。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 100</span><br><span class="line">A 96</span><br><span class="line">Q 1</span><br><span class="line">A 97</span><br><span class="line">Q 1</span><br><span class="line">Q 2</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">96</span><br><span class="line">93</span><br><span class="line">96</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, pos;</span><br><span class="line">&#125; <span class="built_in">stack</span>[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, top = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> val)</span>    <span class="comment">//压栈，维护单调递减</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top &gt;= <span class="number">0</span> &amp;&amp; <span class="built_in">stack</span>[top].val &lt;= val)</span><br><span class="line">        top--;</span><br><span class="line">    <span class="built_in">stack</span>[++top].val = val;</span><br><span class="line">    <span class="built_in">stack</span>[top].pos = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> len)</span>    <span class="comment">//二分查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans, mid, l = <span class="number">0</span>, r = top;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">stack</span>[mid].pos &gt;= cnt - len)</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">            ans = <span class="built_in">stack</span>[mid].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, d, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val;</span><br><span class="line">    <span class="keyword">char</span> cmd[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;d);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%lld"</span>, cmd, &amp;val);</span><br><span class="line">        <span class="keyword">if</span>(cmd[<span class="number">0</span>] == <span class="string">'A'</span>)</span><br><span class="line">            push((val + t) % d);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t = query(val));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;最大数&lt;/strong&gt;&lt;br&gt;时间限制: 1000 ms&lt;br&gt;内存限制: 128 MB&lt;/p&gt;
&lt;p&gt;现在请求你维护一个数列，要求提供以下两种操作：&lt;br&gt;1、 查询操作。&lt;br&gt;语法：&lt;code&gt;Q L&lt;/code&gt;&lt;br&gt;功能：查询当前数列中末尾&lt;code&gt;L&lt;/code&gt;个数中的最大的数，并输出这个数的值。&lt;br&gt;限制：&lt;code&gt;L&lt;/code&gt;不超过当前数列的长度。(&lt;code&gt;L&lt;/code&gt; &amp;gt; 0)&lt;br&gt;2、 插入操作。&lt;br&gt;语法：&lt;code&gt;A n&lt;/code&gt;&lt;br&gt;功能：将&lt;code&gt;n&lt;/code&gt;加上&lt;code&gt;t&lt;/code&gt;，其中&lt;code&gt;t&lt;/code&gt;是最近一次查询操作的答案（如果还未执行过查询操作，则&lt;code&gt;t&lt;/code&gt; = 0)，并将所得结果对一个固定的常数&lt;code&gt;D&lt;/code&gt;取模，将所得答案插入到数列的末尾。&lt;br&gt;限制：&lt;code&gt;n&lt;/code&gt;是整数（可能为负数）并且在长整范围内。&lt;/p&gt;
&lt;p&gt;注意：初始时数列是空的，没有一个数。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="单调栈" scheme="https://pcninja.cn/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="二分查找" scheme="https://pcninja.cn/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>记一个精巧的算法与一段感伤的话</title>
    <link href="https://pcninja.cn/2019/05/record-a-clever-algorithm-and-a-sentimental-remark/"/>
    <id>https://pcninja.cn/2019/05/record-a-clever-algorithm-and-a-sentimental-remark/</id>
    <published>2019-05-20T12:46:50.000Z</published>
    <updated>2019-05-20T13:32:37.503Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;5月20号，中午吃饭，看见一道很有意思的题，题面很简单：</p><blockquote><p>&emsp;&emsp;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p></blockquote><p>这道题解法颇多，但如果要求时间复杂度为O(n)，空间复杂度为O(1)，问题就似乎变得有挑战性了。<br><a id="more"></a><br>&emsp;&emsp;此题的正解非常简单也极其巧妙：将所有元素做异或运算，即a[1] ⊕ a[2] ⊕ a[3] ⊕ … ⊕ a[n]，所得的结果就是那个只出现一次的数字。<br>&emsp;&emsp;原理很好理解：出现2次（可推广为偶数次）的元素经过按位异或后全部变为0，而出现1次（可推广为奇数次）的元素与0进行异或后会被保留。因此所有元素依次异或后得到的结果即为所求。<br>代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LeetCode No.136</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; ++i)</span><br><span class="line">        ans ^= nums[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;晚上打完球回到宿舍，看到下面这段话，有所触动，一种难以言状的思绪在心中徘徊。在此把这段话摘录下来：</p><blockquote><p>年轻时<br>你做了一个决定<br>要把生命献给爱情</p><p>后来<br>万箭穿心的时候<br>你没事<br>因为青春替你抵了命</p><p>青春死了<br>但你还活着<br>可你却再也不会心动了</p><p>每个人都要熬过一段<br>付出很多却没有结果的爱情<br>才会一夜之间突然长大</p><p>所以不要笑话一个人面无表情<br>你只是没看到过<br>他汹涌的内心</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;5月20号，中午吃饭，看见一道很有意思的题，题面很简单：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这道题解法颇多，但如果要求时间复杂度为O(n)，空间复杂度为O(1)，问题就似乎变得有挑战性了。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="日记" scheme="https://pcninja.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="随笔" scheme="https://pcninja.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="情感" scheme="https://pcninja.cn/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——绳子与重物</title>
    <link href="https://pcninja.cn/2019/05/ropes-and-weights/"/>
    <id>https://pcninja.cn/2019/05/ropes-and-weights/</id>
    <published>2019-05-18T03:58:57.000Z</published>
    <updated>2019-05-25T02:10:24.129Z</updated>
    
    <content type="html"><![CDATA[<p><strong>绳子与重物</strong><br>时间限制: 400 ms<br>内存限制: 64 MB</p><p>有N条绳子编号 0 至 N - 1，每条绳子后面栓了一个重物重量为Wi，绳子的最大负重为Ci。每条绳子或挂在别的绳子下或直接挂在钩子上（编号-1）。如果绳子下所有重物的重量大于绳子的最大负重就会断掉（等于不会断）。依次给出每条绳子的负重Ci、重物的重量Wi以及绳子会挂在之前的哪条绳子的下面，问最多挂多少个绳子而不会出现绳子断掉的情况。<br><a id="more"></a><br>例如下图：</p><p>5, 2, -1<br>3, 3, 0<br>6, 1, -1<br>3, 1, 0<br>3, 2, 3</p><div class="image-size-50"><img src="/2019/05/ropes-and-weights/1.png"></div>挂到第4个时会有绳子断掉，所以输出3。<div class="image-size-50"><img src="/2019/05/ropes-and-weights/2.png"></div><p><strong>输入格式：</strong><br>第1行：1个数N，表示绳子的数量(1 &lt;= N &lt;= 50000)。<br>第2 - N+1行：每行3个数，Ci, Wi, Pi。Ci表示最大负重，Wi表示重物的重量，Pi表示挂在哪个绳子上，如果直接挂在钩子上则Pi = -1（1 &lt;= Ci &lt;= 10^9，1 &lt;= Wi &lt;= 10^9，-1 &lt;= Pi &lt;= N - 2)。</p><p><strong>输出格式：</strong><br>输出1个数，最多挂到第几个绳子，不会出现绳子断掉的情况。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5 2 -1</span><br><span class="line">3 3 0</span><br><span class="line">6 1 -1</span><br><span class="line">3 1 0</span><br><span class="line">3 2 3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> c, w, p, fa;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">a</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 路径压缩的递归实现，大规模数据可能造成栈溢出</span></span><br><span class="line"><span class="comment">int find(int n)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(a[n].fa != n)</span></span><br><span class="line"><span class="comment">        a[n].fa = find(a[n].fa);</span></span><br><span class="line"><span class="comment">    return a[n].fa;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径压缩的非递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = n, curr = n, temp;</span><br><span class="line">    <span class="keyword">while</span>(a[root].fa != root)</span><br><span class="line">        root = a[root].fa;</span><br><span class="line">    <span class="keyword">while</span>(curr != root)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = a[curr].fa;</span><br><span class="line">        a[curr].fa = root;</span><br><span class="line">        curr = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    a = (struct node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct node) * n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a[i].c, &amp;a[i].w, &amp;a[i].p);</span><br><span class="line">        a[i].fa = i;</span><br><span class="line">        a[i].sum = a[i].w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i].sum &gt; a[i].c)</span><br><span class="line">        &#123;</span><br><span class="line">            a[find(ans)].sum -= a[ans].w;</span><br><span class="line">            ans--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[a[i].p].sum += a[i].sum;</span><br><span class="line">        <span class="keyword">if</span>(a[i].p &gt; <span class="number">-1</span>)</span><br><span class="line">            a[i].fa = a[i].p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;绳子与重物&lt;/strong&gt;&lt;br&gt;时间限制: 400 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;有N条绳子编号 0 至 N - 1，每条绳子后面栓了一个重物重量为Wi，绳子的最大负重为Ci。每条绳子或挂在别的绳子下或直接挂在钩子上（编号-1）。如果绳子下所有重物的重量大于绳子的最大负重就会断掉（等于不会断）。依次给出每条绳子的负重Ci、重物的重量Wi以及绳子会挂在之前的哪条绳子的下面，问最多挂多少个绳子而不会出现绳子断掉的情况。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="并查集" scheme="https://pcninja.cn/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="路径压缩" scheme="https://pcninja.cn/tags/%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>证明两种线性对数阶复杂度的表示方法等价</title>
    <link href="https://pcninja.cn/2019/05/prove-the-equivalence-of-two-representations-of-complexity-of-quasilinear-time/"/>
    <id>https://pcninja.cn/2019/05/prove-the-equivalence-of-two-representations-of-complexity-of-quasilinear-time/</id>
    <published>2019-05-16T11:20:35.000Z</published>
    <updated>2019-05-16T12:58:27.648Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是离散数学中一道关于算法渐进复杂度的证明题：求证 <script type="math/tex">\log_2n!\in\Theta(n\log_2n)</script> 。<br>&emsp;&emsp;看了网上的一些证明，大多借助斯特林公式，即 <script type="math/tex">\lim\limits_{n\to+\infty}\frac{n!}{\sqrt{2\pi n}(\frac ne)^n}=1</script> ，将 <script type="math/tex">n!</script> 替换成同阶的 <script type="math/tex">\sqrt{2\pi n}(\frac ne)^n</script> 进行证明。若不熟悉该公式，很难想到这种等价替换。在此给出一种比较朴素的证明方法。<br><a id="more"></a><br>证明分两部分：<br>1.&emsp;先证 <script type="math/tex">\log_2n!\in O(n\log_2n)</script></p><script type="math/tex; mode=display">\begin{aligned}&∵\ ∀n\gt0,\ \log_2n!\le \log_2n^n=n\log_2n \\&∴\ \log_2n!\in O(n\log_2n)\end{aligned}</script><p>2.&emsp;再证 <script type="math/tex">\log_2n!\in \Omega(n\log_2n)</script></p><script type="math/tex; mode=display">\begin{aligned}&∵\ n!\ge (\frac n2)^\frac n2 \\&∴\ \log_2n!\ge\log_2(\frac n2)^\frac n2=\frac n2\log_2\frac n2=\frac n2\log_2n-\frac n2\log_22 \\&∵\ ∀n\gt4,\ \frac n2\log_22=\frac n4\log_24\lt\frac n4\log_2n \\&∴\ ∀n\gt4,\ \log_2n!\ge\frac n2\log_2n-\frac n4\log_2n=\frac 14n\log_2n \\&∴\ \log_2n!\in \Omega(n\log_2n)\end{aligned}</script><p>综上所述， <script type="math/tex">\log_2n!\in\Theta(n\log_2n)</script> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这是离散数学中一道关于算法渐进复杂度的证明题：求证 &lt;script type=&quot;math/tex&quot;&gt;\log_2n!\in\Theta(n\log_2n)&lt;/script&gt; 。&lt;br&gt;&amp;emsp;&amp;emsp;看了网上的一些证明，大多借助斯特林公式，即 &lt;script type=&quot;math/tex&quot;&gt;\lim\limits_{n\to+\infty}\frac{n!}{\sqrt{2\pi n}(\frac ne)^n}=1&lt;/script&gt; ，将 &lt;script type=&quot;math/tex&quot;&gt;n!&lt;/script&gt; 替换成同阶的 &lt;script type=&quot;math/tex&quot;&gt;\sqrt{2\pi n}(\frac ne)^n&lt;/script&gt; 进行证明。若不熟悉该公式，很难想到这种等价替换。在此给出一种比较朴素的证明方法。&lt;br&gt;
    
    </summary>
    
      <category term="学科" scheme="https://pcninja.cn/categories/%E5%AD%A6%E7%A7%91/"/>
    
    
      <category term="数学" scheme="https://pcninja.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="离散数学" scheme="https://pcninja.cn/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
      <category term="复杂度" scheme="https://pcninja.cn/tags/%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——游戏分组</title>
    <link href="https://pcninja.cn/2019/05/game-grouping/"/>
    <id>https://pcninja.cn/2019/05/game-grouping/</id>
    <published>2019-05-15T01:29:33.000Z</published>
    <updated>2019-05-18T04:01:17.803Z</updated>
    
    <content type="html"><![CDATA[<p><strong>游戏分组</strong><br>时间限制: 1000 ms<br>内存限制: 128 MB</p><p>为了活跃蒜厂的工作气氛，促进彼此间的友谊，蒜头君决定挑个阳光明媚的周末，带领同学们一起玩游戏。一共有 <code>n</code> 位同学要参加，编号为 <code>0</code> 到 <code>n - 1</code>。蒜头君要对这些同学进行分组，而且蒜头君已经知道哪两个同学之间是好友关系。为了让同学们都玩得开心，蒜头君决定最终的分组方案要将所有好友组合都被分在一组。<br>蒜头君现在知道有 <code>m</code> 对好友关系，需要注意的是，有可能一个同学有很多个好友，也有可能一个同学没有好友。为了让游戏更有趣，蒜头君希望最后分出的组数尽可能多。你能帮蒜头君算出来最多可以分成多少组么？<br><a id="more"></a><br><strong>输入格式：</strong><br>第一行输入两个数 <code>n</code> 和 <code>m</code>，1 ≤ <code>n</code>, <code>m</code> ≤ 1000000。<br>接下来输入 <code>m</code> 行，每行输入两个数 <code>a</code> 和 <code>b</code>，表示编号 <code>a</code> 和编号 <code>b</code> 的同学是好友关系，0 ≤ a, b ≤ <code>n</code> - 1。</p><p><strong>输出格式：</strong><br>输出为一行，表示最多可以分成多少组。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">0 2</span><br><span class="line">2 3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *father, *size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(father[n] != n)</span><br><span class="line">        father[n] = find(father[n]);    <span class="comment">//路径压缩</span></span><br><span class="line">    <span class="keyword">return</span> father[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> roota = find(a), rootb = find(b);</span><br><span class="line">    <span class="keyword">if</span>(roota == rootb)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(size[roota] &gt; size[rootb])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = roota;</span><br><span class="line">        roota = rootb;</span><br><span class="line">        rootb = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    father[roota] = rootb;    <span class="comment">//启发式合并（按集合大小）</span></span><br><span class="line">    size[rootb] += size[roota];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    father = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">    size = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, a, b, num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    init(n);</span><br><span class="line">    num = n;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span>(merge(a, b))</span><br><span class="line">            num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;游戏分组&lt;/strong&gt;&lt;br&gt;时间限制: 1000 ms&lt;br&gt;内存限制: 128 MB&lt;/p&gt;
&lt;p&gt;为了活跃蒜厂的工作气氛，促进彼此间的友谊，蒜头君决定挑个阳光明媚的周末，带领同学们一起玩游戏。一共有 &lt;code&gt;n&lt;/code&gt; 位同学要参加，编号为 &lt;code&gt;0&lt;/code&gt; 到 &lt;code&gt;n - 1&lt;/code&gt;。蒜头君要对这些同学进行分组，而且蒜头君已经知道哪两个同学之间是好友关系。为了让同学们都玩得开心，蒜头君决定最终的分组方案要将所有好友组合都被分在一组。&lt;br&gt;蒜头君现在知道有 &lt;code&gt;m&lt;/code&gt; 对好友关系，需要注意的是，有可能一个同学有很多个好友，也有可能一个同学没有好友。为了让游戏更有趣，蒜头君希望最后分出的组数尽可能多。你能帮蒜头君算出来最多可以分成多少组么？&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="并查集" scheme="https://pcninja.cn/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="路径压缩" scheme="https://pcninja.cn/tags/%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="启发式合并" scheme="https://pcninja.cn/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>今天，致敬青春</title>
    <link href="https://pcninja.cn/2019/05/tribute-to-youth/"/>
    <id>https://pcninja.cn/2019/05/tribute-to-youth/</id>
    <published>2019-05-04T01:00:06.000Z</published>
    <updated>2019-05-06T07:36:00.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自 新浪微博 @人民日报</p></blockquote><p>&emsp;&emsp;青春，是一场场考试，是宽大的校服，是同桌的你和上铺的兄弟；更是青春追梦，成长担当，哪怕万人阻挡，也不曾投降的勇气和力量。青春不是年华，而是心境。它属于年轻人，更属于奋斗者。每一个为梦想拼尽全力的人，都有着青春的光芒。今天，五四青年节，追梦吧，青春！<br><a id="more"></a></p><center class="noBr">  <div class="myGroup">    <div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/1.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/2.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/3.jpg"></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/4.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/5.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/6.jpg"></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/7.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/8.jpg"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2019/05/tribute-to-youth/9.jpg"></div></div></div></div>  </div></center><style type="text/css">  .noBr {    font-size: 0px;  }  .myGroup {    width: 70%;  }  .myGroup img {    margin-top: 0px !important;    margin-bottom: 0px !important;  }</style>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转自 新浪微博 @人民日报&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;青春，是一场场考试，是宽大的校服，是同桌的你和上铺的兄弟；更是青春追梦，成长担当，哪怕万人阻挡，也不曾投降的勇气和力量。青春不是年华，而是心境。它属于年轻人，更属于奋斗者。每一个为梦想拼尽全力的人，都有着青春的光芒。今天，五四青年节，追梦吧，青春！&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://pcninja.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="转载" scheme="https://pcninja.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="青春" scheme="https://pcninja.cn/tags/%E9%9D%92%E6%98%A5/"/>
    
      <category term="五四运动一百周年" scheme="https://pcninja.cn/tags/%E4%BA%94%E5%9B%9B%E8%BF%90%E5%8A%A8%E4%B8%80%E7%99%BE%E5%91%A8%E5%B9%B4/"/>
    
  </entry>
  
  <entry>
    <title>博客装修小记</title>
    <link href="https://pcninja.cn/2019/05/blog-decoration-notes/"/>
    <id>https://pcninja.cn/2019/05/blog-decoration-notes/</id>
    <published>2019-05-02T09:33:01.000Z</published>
    <updated>2019-05-03T03:22:09.855Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;五一小长假，身边的小伙伴大都奔赴各地领略大好河山，朋友圈里的各种照片看得我眼花缭乱。我赋闲在家，做自己喜欢做的事，放松之余也捯饬捯饬自己的小站。<br><a id="more"></a></p><h3 id="小站概况"><a href="#小站概况" class="headerlink" title="小站概况"></a>小站概况</h3><p>自2016年建站以来，先后经历了多次更换托管主机<small>（Hostinger → GitHub Pages → Coding Pages）</small>与域名<small>（potatochipsninja.tk → pcninja.tk → pcninja.cn）</small>，也从动态网站转型成了静态网站<small>（WordPress → Hexo）</small>，可谓风雨飘摇、命途多舛。尽管如此，小站的建设确确实实让我学习了许多前端方面的知识，同时也带给我不小的成就感。</p><h3 id="主要改动"><a href="#主要改动" class="headerlink" title="主要改动"></a>主要改动</h3><p>博客继续采用 Hexo 搭配 Next 主题，风格从原来的 <code>Pisces</code> 更换成了更具现代感的 <code>Gemini</code>，阴影的加入使得页面区块化更加显著。<br>加入了 Valine 评论系统，支持 <code>Markdown</code> 语法，与原有的文章阅读量统计整合在一块，一并存储在 LeanCloud。</p><h3 id="改动一览"><a href="#改动一览" class="headerlink" title="改动一览"></a>改动一览</h3><ul><li>字体：全局字体采用 <code>Noto Serif SC</code>，网站标题字体采用 <code>ZCOOL XiaoWei</code>，均来自 Google 字体库。为了优化访问速度，使用了 CDN（fonts.loli.net）。如果字体没有生效，请清除缓存后刷新网页</li><li>增加背景图片及背景不透明度</li><li>网站标题框及“阅读全文”按钮配色更改</li><li>侧边栏头像改为圆形，鼠标移入有旋转动画效果，点击可跳至主页</li><li>侧边栏社交链接改为仅有图标的简约风格</li><li>侧边栏加入知识共享许可协议 <code>BY-NC-SA</code> 声明图标，取消了文章底部的文字声明</li><li>返回页面顶部按钮由页面右下角移动到侧边栏底部，并显示阅读百分比</li><li>文章阅读量统计与 Valine 评论系统进行合并</li><li>页脚背景样式美化</li><li>页脚跳动的红色爱心（<span style="display: inline-block; margin: 0 5px; animation: iconAnimate 1.33s ease-in-out infinite;"><i class="fa fa-heart" style="color: #ff0000;"></i></span>）改为静止的灰色爱心（<span><i class="fa fa-heart" style="color: #808080;"></i></span>）<del>，期待它的重新跳动</del></li><li>页脚总访客量与总访问量显示风格改为数值居中，图标分列两侧<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3></li><li>有精力的时候从零写一个 Hexo 主题，尝试用 <code>PHP</code> 等编写动态博客程序（<strong>可能</strong>会是暑假）</li><li>扩充自己的技术栈，积极更新技术类博文</li><li>丰富博客内容，多读书，多记录生活，努力提升自身文学素养</li></ul><div class="image-size-50"><img src="/2019/05/blog-decoration-notes/image.png" title="2019继续加油"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;五一小长假，身边的小伙伴大都奔赴各地领略大好河山，朋友圈里的各种照片看得我眼花缭乱。我赋闲在家，做自己喜欢做的事，放松之余也捯饬捯饬自己的小站。&lt;br&gt;
    
    </summary>
    
      <category term="网络" scheme="https://pcninja.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="日记" scheme="https://pcninja.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://pcninja.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="网络" scheme="https://pcninja.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——地铁一日游</title>
    <link href="https://pcninja.cn/2019/04/one-day-metro-tour/"/>
    <id>https://pcninja.cn/2019/04/one-day-metro-tour/</id>
    <published>2019-04-22T08:13:25.000Z</published>
    <updated>2019-05-25T02:10:02.217Z</updated>
    
    <content type="html"><![CDATA[<p><strong>地铁一日游</strong><br>时间限制: 550 ms<br>内存限制: 64 MB</p><p>森森喜欢坐地铁。这个假期，他终于来到了传说中的地铁之城——魔都，打算好好过一把坐地铁的瘾！<br>魔都地铁的计价规则是：起步价 2 元，出发站与到达站的最短距离（即<strong>计费距离</strong>）每 K 公里增加 1 元车费。<br>例如取 <code>K</code> = 10，动安寺站离魔都绿桥站为 40 公里，则车费为 2 + 4 = 6 元。<br>为了获得最大的满足感，森森决定用以下的方式坐地铁：在某一站上车（不妨设为地铁站 <code>A</code>），则对于所有车费相同的到达站，森森只会在计费距离最远的站或线路末端站点出站，然后用森森美图 App 在站点外拍一张认证照，再按同样的方式前往下一个站点。<br>坐着坐着，森森突然好奇起来：在给定出发站的情况下（在出发时森森也会拍一张照），他的整个旅程中能够留下哪些站点的认证照？<br>地铁是铁路运输的一种形式，指在地下运行为主的城市轨道交通系统。一般来说，地铁由若干个站点组成，并有多条不同的线路双向行驶，可类比公交车，当两条或更多条线路经过同一个站点时，可进行<strong>换乘</strong>，更换自己所乘坐的线路。举例来说，魔都 1 号线和 2 号线都经过人民广场站，则乘坐 1 号线到达人民广场时就可以换乘到 2 号线前往 2 号线的各个站点。换乘不需出站（也拍不到认证照），因此森森乘坐地铁时换乘不受限制。<br><a id="more"></a><br><strong>输入格式：</strong><br>输入第一行是三个正整数 <code>N</code>、<code>M</code> 和 <code>K</code>，表示魔都地铁有 <code>N</code> 个车站 (1 ≤ <code>N</code> ≤ 200)，<code>M</code> 条线路 (1 ≤ <code>M</code> ≤ 1500)，最短距离每超过 <code>K</code> 公里 (1 ≤ <code>K</code> ≤ 10^6)，加 1 元车费。<br>接下来 <code>M</code> 行，每行由以下格式组成：<br>&lt;站点1&gt;&lt;空格&gt;&lt;距离&gt;&lt;空格&gt;&lt;站点2&gt;&lt;空格&gt;&lt;距离&gt;&lt;空格&gt;&lt;站点3&gt; … &lt;站点X-1&gt;&lt;空格&gt;&lt;距离&gt;&lt;空格&gt;&lt;站点X&gt;<br>其中站点是一个 1 到 <code>N</code> 的编号；两个站点编号之间的距离指两个站在该线路上的距离。两站之间距离是一个不大于 10^6 的正整数。一条线路上的站点互不相同。<br><strong>注意：</strong>两个站之间可能有多条直接连接的线路，且距离不一定相等。<br>再接下来有一个正整数 <code>Q</code> (1 ≤ <code>Q</code> ≤ 200)，表示森森尝试从 <code>Q</code> 个站点出发。<br>最后有 <code>Q</code> 行，每行一个正整数 <code>Xi</code>，表示森森尝试从编号为 <code>Xi</code> 的站点出发。</p><p><strong>输出格式：</strong><br>对于森森每个尝试的站点，输出一行若干个整数，表示能够到达的站点编号。站点编号从小到大排序。</p><p><strong>输入样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6 2 6</span><br><span class="line">1 6 2 4 3 1 4</span><br><span class="line">5 6 2 6 6</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 2 4 5 6</span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">1 2 4 5 6</span><br><span class="line">1 2 4 5 6</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k, i, j, a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Init D</span></span><br><span class="line">    <span class="keyword">int</span> D[n][n];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            D[i][j] = (i == j ? <span class="number">0</span> : <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Get D</span></span><br><span class="line">    <span class="keyword">int</span> s1, s2, len, terminal[m*<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s1);</span><br><span class="line">        s1--;</span><br><span class="line">        terminal[i*<span class="number">2</span>] = s1;</span><br><span class="line">        ch = getchar();</span><br><span class="line">        <span class="keyword">while</span>(ch != <span class="string">'\n'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;len, &amp;s2);</span><br><span class="line">            s2--;</span><br><span class="line">            <span class="keyword">if</span>(D[s1][s2] == <span class="number">-1</span> || D[s1][s2] &gt; len)</span><br><span class="line">            &#123;</span><br><span class="line">                D[s1][s2] = len;</span><br><span class="line">                D[s2][s1] = D[s1][s2];</span><br><span class="line">            &#125;</span><br><span class="line">            s1 = s2;</span><br><span class="line">            ch = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        terminal[i*<span class="number">2</span> + <span class="number">1</span>] = s1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Floyd</span></span><br><span class="line">    <span class="keyword">for</span>(a = <span class="number">0</span>; a &lt; n; ++a)</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span>(D[i][a] != <span class="number">-1</span> &amp;&amp; D[a][j] != <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">if</span>(D[i][j] == <span class="number">-1</span> || D[i][a] + D[a][j] &lt; D[i][j])</span><br><span class="line">                        D[i][j] = D[i][a] + D[a][j];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Preprocess</span></span><br><span class="line">    <span class="keyword">int</span> canArr[n][n];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            canArr[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; m*<span class="number">2</span>; ++j)</span><br><span class="line">            <span class="keyword">if</span>(D[i][terminal[j]] != <span class="number">-1</span>)</span><br><span class="line">                canArr[i][terminal[j]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j != i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(D[i][j] == <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(a = <span class="number">0</span>; a &lt; n; ++a)</span><br><span class="line">                    <span class="keyword">if</span>(a != i &amp;&amp; a != j)</span><br><span class="line">                        <span class="keyword">if</span>(D[i][a] != <span class="number">-1</span> &amp;&amp; D[i][a] / k == D[i][j] / k &amp;&amp; D[i][a] &gt; D[i][j])</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(a == n)</span><br><span class="line">                    canArr[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Solve Problem</span></span><br><span class="line">    <span class="keyword">int</span> q, start, arr[n], <span class="built_in">queue</span>[n], head, tail, flag;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; q; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            arr[j] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;start);</span><br><span class="line">        arr[--start] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        head = <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>[<span class="number">0</span>] = start;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head &lt;= tail)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">if</span>(!arr[j] &amp;&amp; canArr[<span class="built_in">queue</span>[head]][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">queue</span>[++tail] = j;</span><br><span class="line">                    arr[j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            head++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(arr[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;地铁一日游&lt;/strong&gt;&lt;br&gt;时间限制: 550 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;森森喜欢坐地铁。这个假期，他终于来到了传说中的地铁之城——魔都，打算好好过一把坐地铁的瘾！&lt;br&gt;魔都地铁的计价规则是：起步价 2 元，出发站与到达站的最短距离（即&lt;strong&gt;计费距离&lt;/strong&gt;）每 K 公里增加 1 元车费。&lt;br&gt;例如取 &lt;code&gt;K&lt;/code&gt; = 10，动安寺站离魔都绿桥站为 40 公里，则车费为 2 + 4 = 6 元。&lt;br&gt;为了获得最大的满足感，森森决定用以下的方式坐地铁：在某一站上车（不妨设为地铁站 &lt;code&gt;A&lt;/code&gt;），则对于所有车费相同的到达站，森森只会在计费距离最远的站或线路末端站点出站，然后用森森美图 App 在站点外拍一张认证照，再按同样的方式前往下一个站点。&lt;br&gt;坐着坐着，森森突然好奇起来：在给定出发站的情况下（在出发时森森也会拍一张照），他的整个旅程中能够留下哪些站点的认证照？&lt;br&gt;地铁是铁路运输的一种形式，指在地下运行为主的城市轨道交通系统。一般来说，地铁由若干个站点组成，并有多条不同的线路双向行驶，可类比公交车，当两条或更多条线路经过同一个站点时，可进行&lt;strong&gt;换乘&lt;/strong&gt;，更换自己所乘坐的线路。举例来说，魔都 1 号线和 2 号线都经过人民广场站，则乘坐 1 号线到达人民广场时就可以换乘到 2 号线前往 2 号线的各个站点。换乘不需出站（也拍不到认证照），因此森森乘坐地铁时换乘不受限制。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="Floyd" scheme="https://pcninja.cn/tags/Floyd/"/>
    
  </entry>
  
  <entry>
    <title>数据结构作业——天梯地图</title>
    <link href="https://pcninja.cn/2019/04/high-ladder-map/"/>
    <id>https://pcninja.cn/2019/04/high-ladder-map/</id>
    <published>2019-04-22T07:53:35.000Z</published>
    <updated>2019-05-25T02:10:06.398Z</updated>
    
    <content type="html"><![CDATA[<p><strong>天梯地图</strong><br>时间限制: 300 ms<br>内存限制: 64 MB</p><p>本题要求你实现一个天梯赛专属在线地图，队员输入自己学校所在地和赛场地点后，该地图应该推荐两条路线：一条是最快到达路线；一条是最短距离的路线。题目保证对任意的查询请求，地图上都至少存在一条可达路线。<br><a id="more"></a><br><strong>输入格式：</strong><br>输入在第一行给出两个正整数<code>N</code>（2 ≤ <code>N</code> ≤ 500）和<code>M</code>，分别为地图中所有标记地点的个数和连接地点的道路条数。随后<code>M</code>行，每行按如下格式给出一条道路的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V1 V2 one-way length time</span><br></pre></td></tr></table></figure></p><p>其中<code>V1</code>和<code>V2</code>是道路的两个端点的编号（从0到<code>N</code>-1）；如果该道路是从<code>V1</code>到<code>V2</code>的单行线，则<code>one-way</code>为1，否则为0；<code>length</code>是道路的长度；<code>time</code>是通过该路所需要的时间。最后给出一对起点和终点的编号。</p><p><strong>输出格式：</strong><br>首先按下列格式输出最快到达的时间<code>T</code>和用节点编号表示的路线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time = T: 起点 =&gt; 节点1 =&gt; ... =&gt; 终点</span><br></pre></td></tr></table></figure></p><p>然后在下一行按下列格式输出最短距离<code>D</code>和用节点编号表示的路线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Distance = D: 起点 =&gt; 节点1 =&gt; ... =&gt; 终点</span><br></pre></td></tr></table></figure></p><p>如果最快到达路线不唯一，则输出几条最快路线中最短的那条，题目保证这条路线是唯一的。而如果最短距离的路线不唯一，则输出途径节点数最少的那条，题目保证这条路线是唯一的。</p><p>如果这两条路线是完全一样的，则按下列格式输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time = T; Distance = D: 起点 =&gt; 节点1 =&gt; ... =&gt; 终点</span><br></pre></td></tr></table></figure></p><p><strong>输入样例1：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">10 15</span><br><span class="line">0 1 0 1 1</span><br><span class="line">8 0 0 1 1</span><br><span class="line">4 8 1 1 1</span><br><span class="line">5 4 0 2 3</span><br><span class="line">5 9 1 1 4</span><br><span class="line">0 6 0 1 1</span><br><span class="line">7 3 1 1 2</span><br><span class="line">8 3 1 1 2</span><br><span class="line">2 5 0 2 2</span><br><span class="line">2 1 1 1 1</span><br><span class="line">1 5 0 1 3</span><br><span class="line">1 4 0 1 1</span><br><span class="line">9 7 1 1 3</span><br><span class="line">3 1 0 2 5</span><br><span class="line">6 3 1 2 1</span><br><span class="line">5 3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Time = 6: 5 =&gt; 4 =&gt; 8 =&gt; 3</span><br><span class="line">Distance = 3: 5 =&gt; 1 =&gt; 3</span><br></pre></td></tr></table></figure></p><p><strong>输入样例2：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">7 9</span><br><span class="line">0 4 1 1 1</span><br><span class="line">1 6 1 3 1</span><br><span class="line">2 6 1 1 1</span><br><span class="line">2 5 1 2 2</span><br><span class="line">3 0 0 1 1</span><br><span class="line">3 1 1 3 1</span><br><span class="line">3 2 1 2 1</span><br><span class="line">4 5 0 2 2</span><br><span class="line">6 5 1 2 1</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time = 3; Distance = 4: 3 =&gt; 2 =&gt; 5</span><br></pre></td></tr></table></figure></p><p><strong>代码</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Target;</span><br><span class="line">    <span class="keyword">int</span> Length;</span><br><span class="line">    <span class="keyword">int</span> Time;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> *<span class="title">NextEdge</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> *<span class="title">Head</span>;</span></span><br><span class="line">    <span class="keyword">int</span> Known;</span><br><span class="line">    <span class="keyword">int</span> Dist;</span><br><span class="line">    <span class="keyword">int</span> PathDist;</span><br><span class="line">    <span class="keyword">int</span> Time;</span><br><span class="line">    <span class="keyword">int</span> PathTime;</span><br><span class="line">    <span class="keyword">int</span> VertexNums;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadGraph</span><span class="params">(struct Vertex *G, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin, target, oneWay, length, time;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        G[i].Head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &amp;begin, &amp;target, &amp;oneWay, &amp;length, &amp;time);</span><br><span class="line">        p = G[begin].Head;</span><br><span class="line">        G[begin].Head = (struct Edge *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Edge));</span><br><span class="line">        G[begin].Head-&gt;Target = target;</span><br><span class="line">        G[begin].Head-&gt;Length = length;</span><br><span class="line">        G[begin].Head-&gt;Time = time;</span><br><span class="line">        G[begin].Head-&gt;NextEdge = p;</span><br><span class="line">        <span class="keyword">if</span>(!oneWay)</span><br><span class="line">        &#123;</span><br><span class="line">            p = G[target].Head;</span><br><span class="line">            G[target].Head = (struct Edge *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Edge));</span><br><span class="line">            G[target].Head-&gt;Target = begin;</span><br><span class="line">            G[target].Head-&gt;Length = length;</span><br><span class="line">            G[target].Head-&gt;Time = time;</span><br><span class="line">            G[target].Head-&gt;NextEdge = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(struct Vertex *G, <span class="keyword">int</span> n, <span class="keyword">int</span> begin)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v, vDist, vTime, vNums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        G[i].Known = <span class="number">0</span>;</span><br><span class="line">        G[i].Dist = G[i].Time = G[i].PathDist = G[i].PathTime = G[i].VertexNums = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G[begin].Dist = G[begin].Time = G[begin].VertexNums = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v = vTime = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span>(!G[i].Known &amp;&amp; G[i].Time != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(v == <span class="number">-1</span> || G[i].Time &lt; vTime)</span><br><span class="line">                &#123;</span><br><span class="line">                    vTime = G[i].Time;</span><br><span class="line">                    vDist = G[i].Dist;</span><br><span class="line">                    v = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(G[i].Time == vTime &amp;&amp; G[i].Dist &lt; vDist)</span><br><span class="line">                &#123;</span><br><span class="line">                    vDist = G[i].Dist;</span><br><span class="line">                    v = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(v == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        G[v].Known = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(struct Edge *p = G[v].Head; p; p = p-&gt;NextEdge)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!G[p-&gt;Target].Known)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(G[p-&gt;Target].Time == <span class="number">-1</span> || G[v].Time + p-&gt;Time &lt; G[p-&gt;Target].Time)</span><br><span class="line">                &#123;</span><br><span class="line">                    G[p-&gt;Target].Time = G[v].Time + p-&gt;Time;</span><br><span class="line">                    G[p-&gt;Target].Dist = G[v].Dist + p-&gt;Length;</span><br><span class="line">                    G[p-&gt;Target].PathTime = v;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((G[v].Time + p-&gt;Time == G[p-&gt;Target].Time) &amp;&amp; (G[v].Dist + p-&gt;Length &lt; G[p-&gt;Target].Dist))</span><br><span class="line">                &#123;</span><br><span class="line">                    G[p-&gt;Target].Dist = G[v].Dist + p-&gt;Length;</span><br><span class="line">                    G[p-&gt;Target].PathTime = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        G[i].Known = <span class="number">0</span>;</span><br><span class="line">        G[i].Dist = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G[begin].Dist = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v = vDist = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span>(!G[i].Known &amp;&amp; G[i].Dist != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(v == <span class="number">-1</span> || G[i].Dist &lt; vDist)</span><br><span class="line">                &#123;</span><br><span class="line">                    vDist = G[i].Dist;</span><br><span class="line">                    vNums = G[i].VertexNums;</span><br><span class="line">                    v = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(G[i].Dist == vDist &amp;&amp; G[i].VertexNums &lt; vNums)</span><br><span class="line">                &#123;</span><br><span class="line">                    vNums = G[i].VertexNums;</span><br><span class="line">                    v = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(v == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        G[v].Known = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(struct Edge *p = G[v].Head; p; p = p-&gt;NextEdge)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!G[p-&gt;Target].Known)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(G[p-&gt;Target].Dist == <span class="number">-1</span> || G[v].Dist + p-&gt;Length &lt; G[p-&gt;Target].Dist)</span><br><span class="line">                &#123;</span><br><span class="line">                    G[p-&gt;Target].Dist = G[v].Dist + p-&gt;Length;</span><br><span class="line">                    G[p-&gt;Target].VertexNums = G[v].VertexNums + <span class="number">1</span>;</span><br><span class="line">                    G[p-&gt;Target].PathDist = v;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((G[v].Dist + p-&gt;Length == G[p-&gt;Target].Dist) &amp;&amp; (G[v].VertexNums + <span class="number">1</span> &lt; G[p-&gt;Target].VertexNums))</span><br><span class="line">                &#123;</span><br><span class="line">                    G[p-&gt;Target].VertexNums = G[v].VertexNums + <span class="number">1</span>;</span><br><span class="line">                    G[p-&gt;Target].PathDist = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(struct Vertex *G, <span class="keyword">int</span> end, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[end].PathDist != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PrintPath(G, G[end].PathDist, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" =&gt; %d"</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[end].PathTime != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            PrintPath(G, G[end].PathTime, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" =&gt; %d"</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(struct Vertex *G, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = end;</span><br><span class="line">    <span class="keyword">while</span>(i != begin)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i].PathDist != G[i].PathTime)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        i = G[i].PathDist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == begin)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Time = %d; Distance = %d: %d"</span>, G[end].Time, G[end].Dist, begin);</span><br><span class="line">        PrintPath(G, end, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Time = %d: %d"</span>, G[end].Time, begin);</span><br><span class="line">        PrintPath(G, end, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nDistance = %d: %d"</span>, G[end].Dist, begin);</span><br><span class="line">        PrintPath(G, end, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, begin, end;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span> <span class="title">G</span>[<span class="title">n</span>];</span></span><br><span class="line">    ReadGraph(G, n, m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;begin, &amp;end);</span><br><span class="line">    Dijkstra(G, n, begin);</span><br><span class="line">    Output(G, begin, end);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;天梯地图&lt;/strong&gt;&lt;br&gt;时间限制: 300 ms&lt;br&gt;内存限制: 64 MB&lt;/p&gt;
&lt;p&gt;本题要求你实现一个天梯赛专属在线地图，队员输入自己学校所在地和赛场地点后，该地图应该推荐两条路线：一条是最快到达路线；一条是最短距离的路线。题目保证对任意的查询请求，地图上都至少存在一条可达路线。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="https://pcninja.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://pcninja.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="作业" scheme="https://pcninja.cn/tags/%E4%BD%9C%E4%B8%9A/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="Dijkstra" scheme="https://pcninja.cn/tags/Dijkstra/"/>
    
  </entry>
  
  <entry>
    <title>有点小累</title>
    <link href="https://pcninja.cn/2019/04/i-am-tired/"/>
    <id>https://pcninja.cn/2019/04/i-am-tired/</id>
    <published>2019-04-17T13:54:13.000Z</published>
    <updated>2019-05-02T12:22:51.356Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;距离上次更新博客已经过去足足五个月了，尽管时常想起自己还有这么个博客，但总会因为种种原因而被搁置。难得今天有兴致记录一下生活，就大概写写这小半年发生的大小事吧。<br><a id="more"></a><br>&emsp;&emsp;一九年初，正当人们沉浸在新年来临的喜悦之际，我遭受到了迄今为止最大的挫折——我丢了我最重要的东西，这是无疑是一次难以承受的挫折。巨大的冲击让我陷入恍惚与错乱，我想用万念俱灰来形容那时的我再合适不过了。就这样，我陷入了无尽的回忆之中，神魂颠倒地挨过了这个寒冬。<br>&emsp;&emsp;大概历经两个多月，我才渐渐恢复意识，开始重新认识自己、认识世界、认识眼前的一草一木。我意识到不应再踯躅，也不需要不停地回忆。我们只要在恰当的时候，回首眺望似水年华，这便是回忆的全部作用。为了最初的理想，也为了另外一个更重要的原因，我踏上了新的征程。<br>&emsp;&emsp;新学期，新的班级，新的同学，一切都不再熟悉。但是没时间让我熟悉这些，因为学业上的压力明显要高过以往。迫不得已，我把更多的时间分给课业。尽管跟别的同学比，我玩的时间绝对算是最多的之一，但是要知道在中学时期我从来没有花过这么多时间在学习上，所以无论是身体还是精神都需要适应适应。我发现，在实验班，需要的不仅是智力，还需要有足够的精力来处理各种报告、集会、比赛以及各种各样的琐事。今天之所以写博客来小小地抱怨一下就是因为光一个电子电路实验报告就占去了我溜溜三个多小时，这让我不太能接受。</p><p><div class="image-size-30"><img src="/2019/04/i-am-tired/image.jpg"></div><br>&emsp;&emsp;但我其实并不是想抱怨什么，只是我有点累了。我相信，此时此刻，把自己的疲倦写下来，就是最好的缓解。<br>&emsp;&emsp;明天，太阳照常升起，我知道那时我会充好能量，开始新的一天。所以现在，就让我结束这篇语无伦次的博文，然后，睡个好觉。<br>&emsp;&emsp;祝我晚安，也祝你晚安。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;距离上次更新博客已经过去足足五个月了，尽管时常想起自己还有这么个博客，但总会因为种种原因而被搁置。难得今天有兴致记录一下生活，就大概写写这小半年发生的大小事吧。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="https://pcninja.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="日记" scheme="https://pcninja.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活" scheme="https://pcninja.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="随笔" scheme="https://pcninja.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>申请Let&#39;s Encrypt免费SSL证书并在Node.js建立HTTPS服务</title>
    <link href="https://pcninja.cn/2018/11/letsencrypt-certificates-and-https-in-nodejs/"/>
    <id>https://pcninja.cn/2018/11/letsencrypt-certificates-and-https-in-nodejs/</id>
    <published>2018-11-18T01:07:07.000Z</published>
    <updated>2019-06-17T14:16:18.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;为了更安全地传输，我们往往需要建立HTTPS连接。我们可以利用OpenSSL创建自签名的证书，但创建自己的CA机构并不安全也不被各大浏览器承认。目前有不少免费SSL证书提供商，其中最流行的便是Let’s Encrypt（<a href="https://letsencrypt.org/" target="_blank" rel="noopener">官网</a>），下面是关于如何申请Let’s Encrypt免费SSL证书并用Node.js建立一个HTTPS服务器。</p></blockquote><a id="more"></a><h2 id="申请Let’s-Encrypt免费SSL证书"><a href="#申请Let’s-Encrypt免费SSL证书" class="headerlink" title="申请Let’s Encrypt免费SSL证书"></a>申请Let’s Encrypt免费SSL证书</h2><p>Let’s Encrypt官方推荐使用<a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a> ACME客户端。它可以自动执行证书颁发和安装，无需停机且易于使用。</p><ul><li><p>首先安装<code>certbot</code><br>通过SSH连接到你的VPS或云服务器，确保已经安装了Python及Git。本文以CentOS为例，其他发行版大同小异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install certbot</span><br></pre></td></tr></table></figure></li><li><p>获取证书<br>首先停止你服务器上的服务，保证80端口没有被占用并且你的域名被正确解析到你的服务器，否则在证书获取过程中会出现错误。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo certbot certonly --standalone -d diunar.tk -d www.diunar.tk    #把diunar.tk换成你的域名</span><br></pre></td></tr></table></figure></li></ul><p>当看到“Congratulations”字样时，代表你已经成功申请到Let’s Encrypt的免费SSL证书，证书有效期是90天，后面会讲如何<del>&nbsp;续命&nbsp;</del>延期。<br>证书文件被保存到了<code>/etc/letsencrypt/live/你的域名/</code>，其中的<code>fullchain.pem</code>和<code>privkey.pem</code>是我们接下来需要用到的完整证书链及私钥</p><p><div class="image-size-80"><img src="/2018/11/letsencrypt-certificates-and-https-in-nodejs/obtain_cert.png" title="成功获取证书"></div><br>如果你希望在Nginx或Apache等Web服务器上应用你的SSL请在Certbot的<a href="https://certbot.eff.org/" target="_blank" rel="noopener">官网</a>上查看方法。下面我们用Node.js编写服务器建立HTTPS服务</p><h2 id="通过Node-js建立HTTPS服务"><a href="#通过Node-js建立HTTPS服务" class="headerlink" title="通过Node.js建立HTTPS服务"></a>通过Node.js建立HTTPS服务</h2><ul><li><p>为了方便，我们使用<code>Express</code>框架，因此需要安装<code>Express</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install express</span><br></pre></td></tr></table></figure></li><li><p>创建<code>index.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">80</span>        <span class="comment">//HTTP访问端口号，默认80，可更改为你希望的端口号</span></span><br><span class="line"><span class="keyword">const</span> SSLport = <span class="number">443</span>    <span class="comment">//HTTPS访问端口号，默认443，可更改为你希望的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    key: fs.readFileSync(<span class="string">'/etc/letsencrypt/live/diunar.tk/privkey.pem'</span>),     <span class="comment">//异步读取私钥文件</span></span><br><span class="line">    cert: fs.readFileSync(<span class="string">'/etc/letsencrypt/live/diunar.tk/fullchain.pem'</span>),  <span class="comment">//异步读取证书文件</span></span><br><span class="line">    requestCert: <span class="literal">false</span>,        <span class="comment">//是否请求客户端证书</span></span><br><span class="line">    rejectUnauthorized: <span class="literal">false</span>  <span class="comment">//是否拒绝无信任CA颁发的证书的客户端连接请求</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(app).listen(port, () =&gt; <span class="built_in">console</span>.log(<span class="string">`HTTP server is listening on port <span class="subst">$&#123;port&#125;</span>`</span>))                   <span class="comment">//创建http服务监听</span></span><br><span class="line">https.createServer(options, app).listen(SSLport, () =&gt; <span class="built_in">console</span>.log(<span class="string">`HTTPS server is listening on port <span class="subst">$&#123;SSLport&#125;</span>`</span>))  <span class="comment">//创建https服务监听</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.protocol == <span class="string">'https'</span>) &#123;</span><br><span class="line">        res.send(<span class="string">"This is HTTPS Server"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(<span class="string">"This is HTTP Server"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>如果不需要HTTP服务可以删除<code>http.createServer(app)</code>，只保留HTTPS服务</p><ul><li>运行Node.js服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> node index.js</span><br><span class="line">HTTP server is listening on port 80</span><br><span class="line">HTTPS server is listening on port 443</span><br></pre></td></tr></table></figure></li></ul><p>在浏览器分别通过<code>http://</code>和<code>https://</code>协议访问你的域名，看看有什么区别：</p><p><div class="image-size-30"><img src="/2018/11/letsencrypt-certificates-and-https-in-nodejs/http_server.png" title="通过HTTP访问"></div></p><p><div class="image-size-30"><img src="/2018/11/letsencrypt-certificates-and-https-in-nodejs/https_server.png" title="通过HTTPS访问"></div><br>通过浏览器可以看到我们与服务器建立的是密文传输连接：</p><p><div class="image-size-50"><img src="/2018/11/letsencrypt-certificates-and-https-in-nodejs/safe_connection.png" title="安全的连接"></div></p><p><div class="image-size-50"><img src="/2018/11/letsencrypt-certificates-and-https-in-nodejs/cert_info.png" title="证书信息"></div><br>大功告成之后，别忘了每隔90天通过<code>certbot renew</code>命令进行证书的续订。你也可以设置自动续订，具体方法请见Certbot<a href="https://certbot.eff.org/" target="_blank" rel="noopener">官网</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;为了更安全地传输，我们往往需要建立HTTPS连接。我们可以利用OpenSSL创建自签名的证书，但创建自己的CA机构并不安全也不被各大浏览器承认。目前有不少免费SSL证书提供商，其中最流行的便是Let’s Encrypt（&lt;a href=&quot;https://letsencrypt.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;），下面是关于如何申请Let’s Encrypt免费SSL证书并用Node.js建立一个HTTPS服务器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="网络" scheme="https://pcninja.cn/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="网络" scheme="https://pcninja.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="SSL" scheme="https://pcninja.cn/tags/SSL/"/>
    
      <category term="HTTPS" scheme="https://pcninja.cn/tags/HTTPS/"/>
    
      <category term="Node.js" scheme="https://pcninja.cn/tags/Node-js/"/>
    
      <category term="Express" scheme="https://pcninja.cn/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Express+MongoDB后端与微信小程序前端建构最小端到端系统</title>
    <link href="https://pcninja.cn/2018/10/minimum-end-to-end-system/"/>
    <id>https://pcninja.cn/2018/10/minimum-end-to-end-system/</id>
    <published>2018-10-04T02:25:56.000Z</published>
    <updated>2018-10-04T09:00:24.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务端搭建"><a href="#服务端搭建" class="headerlink" title="服务端搭建"></a>服务端搭建</h2><hr><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><h4 id="1-操作系统与网络"><a href="#1-操作系统与网络" class="headerlink" title="1.操作系统与网络"></a>1.操作系统与网络</h4><p>本文以<a href="https://www.archlinux.org/" target="_blank" rel="noopener">Arch Linux</a>为例，在<a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox</a>虚拟机下运行，通过SSH与宿主机连接。<br>由于虚拟机通过NAT联网，要想访问在虚拟机中部署的Web服务需要进行端口转发：</p><ul><li>打开<strong>VirtualBox管理器</strong>，进入Arch虚拟机的<strong>设置</strong>页，在<strong>网络</strong>选项卡中点击<strong>高级</strong><div class="image-size-50"><img src="/2018/10/minimum-end-to-end-system/VM_setting.png" title="虚拟机网络设置"></div></li><li>点击<strong>端口转发</strong>，我们新建一个端口转发规则。协议为<code>TCP</code>；主机IP填写VirtualBox虚拟网卡的地址，在Windows宿主机通过<code>ipconfig</code>命令可查看，默认为<code>192.168.56.1</code>；子系统IP填写虚拟机IPv4地址，在Arch虚拟机中通过<code>ip addr</code>命令可查看（图中红框所示处）；子系统端口为我们即将部署的Node服务的监听端口；主机端口为转发到主机后的端口，我们应该避开常用或已被占用的端口（如21、22、25、80、443），为了方便我们可以转发到原端口，本文以3000端口为例<div class="image-size-80"><img src="/2018/10/minimum-end-to-end-system/VM_ip.png" title="Arch查看IP"></div><div class="image-size-50"><img src="/2018/10/minimum-end-to-end-system/port_forwarding.png" title="端口转发"></div></li><li>这样设置完毕后虚拟机的3000端口就可以通过<code>192.168.56.1:3000</code>访问了<a id="more"></a><h4 id="2-Node-js"><a href="#2-Node-js" class="headerlink" title="2.Node.js"></a>2.Node.js</h4>由于该虚拟机此前已安装Node.js、MongoDB等，首先将其卸载再做演示：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pacman -Rsc nodejs mongodb  #删除Node.js、MongoDB和所有依赖这两个软件包的程序</span><br></pre></td></tr></table></figure></li></ul><p>更多关于<code>pacman</code>（Arch官方软件包管理器）的用法请见<a href="https://wiki.archlinux.org/index.php/Pacman_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener">这里</a><br>通过<code>pacman</code>安装Node.js：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pacman -S nodejs npm  #安装node及包管理器npm</span><br></pre></td></tr></table></figure></p><p>或者从<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node.js官网</a>下载二进制文件：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget https://nodejs.org/dist/v8.12.0/node-v8.12.0-linux-x64.tar.xz</span><br><span class="line"><span class="meta">$</span> xz -d node-v8.12.0-linux-x64.tar.xz</span><br><span class="line"><span class="meta">$</span> tar -xvf node-v8.12.0-linux-x64.tar</span><br></pre></td></tr></table></figure></p><h4 id="3-MongoDB"><a href="#3-MongoDB" class="headerlink" title="3.MongoDB"></a>3.MongoDB</h4><ul><li>方法一：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pacman -S mongodb  #从官方软件仓库安装mongodb</span><br><span class="line"><span class="meta">$</span> systemctl start mongodb.service  #启动mongodb服务</span><br><span class="line"><span class="meta">$</span> systemctl enable mongodb.service  #设置开机启动服务</span><br></pre></td></tr></table></figure><p>Arch Linux的默认dbpath是/var/lib/mongodb/，启动服务后可以通过<code>mongo</code>命令进入Mongo Shell</p><ul><li>方法二：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /home</span><br><span class="line"><span class="meta">$</span> wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.2.tgz  #从官网下载二进制包</span><br><span class="line"><span class="meta">$</span> tar -xzvf mongodb-linux-x86_64-4.0.2.tgz</span><br></pre></td></tr></table></figure><p>为了快速使用<code>mongodb</code>命令，可以配置环境变量。编辑<code>~/.profile</code>或<code>/etc/profile</code>文件，将<code>mongodb/bin</code>路径加入即可：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>在文件末尾添加一行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/mongodb-linux-x86_64-4.0.2/bin</span><br></pre></td></tr></table></figure></p><p>保存修改后，在终端运行以下命令使环境变量生效：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure></p><p>启动<code>mongod</code>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /data/db  <span class="comment">#创建数据存放目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mongod --dbpath /data/db</span></span><br></pre></td></tr></table></figure></p><p>此时<code>mongod</code>已经启动，我们可以在另一终端中通过<code>mongo</code>命令进入交互程序</p><h3 id="二、部署服务"><a href="#二、部署服务" class="headerlink" title="二、部署服务"></a>二、部署服务</h3><h4 id="1-建立应用并安装依赖"><a href="#1-建立应用并安装依赖" class="headerlink" title="1.建立应用并安装依赖"></a>1.建立应用并安装依赖</h4><p>首先建立一个工作目录：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir wx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> wx</span></span><br></pre></td></tr></table></figure></p><p>通过<code>npm init</code>初始化一个应用，此时会要求你输入应用的名称、版本、入口文件等信息，可以按<code>Enter</code>键选择默认值，最终<code>npm</code>会为你生成一个<code>package.json</code>文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init</span></span><br></pre></td></tr></table></figure></p><p>下面通过Node包管理器安装Express、Mongoose：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install express mongoose --save</span></span><br></pre></td></tr></table></figure></p><p>安装成功后会出现<code>+ express</code>、<code>+ mongoose</code>等字样，这两个包及其所需依赖都被安装在<code>/node_modules</code>中并被写入<code>package.json</code>：</p><p><div class="image-size-80"><img src="/2018/10/minimum-end-to-end-system/npm_install.png" title="安装Express、Mongoose"></div><br>除了上述方法，我们也可以通过全局安装来达到一劳永逸的目的：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install express mongoose -g</span></span><br></pre></td></tr></table></figure></p><h4 id="2-建立HWMongo模块"><a href="#2-建立HWMongo模块" class="headerlink" title="2.建立HWMongo模块"></a>2.建立HWMongo模块</h4><p>编辑<code>hwmongo.js</code>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hwMongo.js</span><br></pre></td></tr></table></figure></p><p>将数据库连接与定义Schema部分写进<code>hwMongo.js</code>，以便后续调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hwmongo.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>);  <span class="comment">//与数据库建立连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> helloWorldSchema = mongoose.Schema(&#123;</span><br><span class="line">    country: <span class="built_in">String</span>,</span><br><span class="line">    helloWorld: <span class="built_in">String</span>,</span><br><span class="line">&#125;);  <span class="comment">//定义数据架构helloWorldSchema</span></span><br><span class="line"><span class="keyword">var</span> HWMongo = mongoose.model(<span class="string">'HWs'</span>, helloWorldSchema);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HWMongo;  <span class="comment">//导出HWMongo</span></span><br></pre></td></tr></table></figure></p><h4 id="3-初始化数据"><a href="#3-初始化数据" class="headerlink" title="3.初始化数据"></a>3.初始化数据</h4><p>编辑<code>initData.js</code>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim initData.js</span><br></pre></td></tr></table></figure></p><p>将初始数据插入文档：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HWMongo = <span class="built_in">require</span>(<span class="string">'./hwMongo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> HWMongo(&#123;</span><br><span class="line">    country: <span class="string">'China'</span>,</span><br><span class="line">    helloWorld: <span class="string">'你好，世界!'</span></span><br><span class="line">&#125;).save();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> HWMongo(&#123;</span><br><span class="line">    country: <span class="string">'US'</span>,</span><br><span class="line">    helloWorld: <span class="string">'Hello World!'</span></span><br><span class="line">&#125;).save();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> HWMongo(&#123;</span><br><span class="line">    country: <span class="string">'Danmark'</span>,</span><br><span class="line">    helloWorld: <span class="string">'Hallo, Verden!'</span></span><br><span class="line">&#125;).save();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> HWMongo(&#123;</span><br><span class="line">    country: <span class="string">'Germany'</span>,</span><br><span class="line">    helloWorld: <span class="string">'Hallo, Welt!'</span></span><br><span class="line">&#125;).save();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> HWMongo(&#123;</span><br><span class="line">    country: <span class="string">'France'</span>,</span><br><span class="line">    helloWorld: <span class="string">'Bonjour, tout le monde'</span></span><br><span class="line">&#125;).save();</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node initData.js</span><br></pre></td></tr></table></figure></p><p>如果出现“当前URL解析器被弃用”的警告，我们可以修改<code>hwMongo.js</code>的数据库连接部分（第3行），使用新的解析器：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>, &#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;);  <span class="comment">//Line 3</span></span><br></pre></td></tr></table></figure></p><p>数据初始化完成之后我们可以通过<code>mongo</code>进入Mongo Shell，在交互程序中通过<code>use wx</code>切换至数据库“wx”，通过<code>show collections</code>可以列出数据库中的全部集合，通过<code>db.hws.find()</code>可以进行查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; use wx</span><br><span class="line">switched to db wx</span><br><span class="line">&gt; show collections</span><br><span class="line">hws</span><br><span class="line">&gt; db.hws.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bb597c822106c03e8e75b72&quot;), &quot;country&quot; : &quot;US&quot;, &quot;helloWorld&quot; : &quot;Hello World!&quot;, &quot;__v&quot; : 0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bb597c822106c03e8e75b73&quot;), &quot;country&quot; : &quot;Danmark&quot;, &quot;helloWorld&quot; : &quot;Hallo, Verden!&quot;, &quot;__v&quot; : 0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bb597c822106c03e8e75b74&quot;), &quot;country&quot; : &quot;Germany&quot;, &quot;helloWorld&quot; : &quot;Hallo, Welt!&quot;, &quot;__v&quot; : 0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bb597c822106c03e8e75b75&quot;), &quot;country&quot; : &quot;France&quot;, &quot;helloWorld&quot; : &quot;Bonjour, tout le monde&quot;, &quot;__v&quot; : 0 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5bb597c822106c03e8e75b71&quot;), &quot;country&quot; : &quot;China&quot;, &quot;helloWorld&quot; : &quot;你好，世界!&quot;, &quot;__v&quot; : 0 &#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-建立HTTP服务器"><a href="#4-建立HTTP服务器" class="headerlink" title="4.建立HTTP服务器"></a>4.建立HTTP服务器</h4><p>编辑入口文件<code>index.js</code>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim index.js</span><br></pre></td></tr></table></figure></p><p>在<code>index.js</code>中编写简易HTTP服务器与查询服务：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> HWMongo = <span class="built_in">require</span>(<span class="string">'./hwMongo.js'</span>);  <span class="comment">//调用模块</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;  <span class="comment">//http服务器端口号</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/country'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    HWMongo.findOne(&#123;<span class="string">'country'</span>: req.query.country&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"数据库出错"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (doc==<span class="literal">null</span>) &#123;</span><br><span class="line">            res.send(<span class="string">"输入信息有误，请重试"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(req.query.country + <span class="string">":"</span> + doc);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(doc.helloWorld);  <span class="comment">//应答报文</span></span><br><span class="line">            <span class="built_in">console</span>.log(req.query.country + <span class="string">":"</span> +doc.helloWorld);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at http://localhost:3000/.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>HTTP服务器跑起来后宿主机所在局域网内的设备可以通过<code>http://192.168.56.1:3000</code>来访问：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure></p><p><div class="image-size-80"><img src="/2018/10/minimum-end-to-end-system/http_server.png" title="访问服务器"></div><br>至此，服务端已搭建完成<br><br><br></p><h2 id="前端小程序实现"><a href="#前端小程序实现" class="headerlink" title="前端小程序实现"></a>前端小程序实现</h2><hr><h3 id="一、开发工具"><a href="#一、开发工具" class="headerlink" title="一、开发工具"></a>一、开发工具</h3><p>在<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">这里</a>下载并安装微信web开发者工具</p><h3 id="二、项目与项目配置文件"><a href="#二、项目与项目配置文件" class="headerlink" title="二、项目与项目配置文件"></a>二、项目与项目配置文件</h3><p>新建一个空白项目，编辑项目配置文件<code>project.config.json</code>，为了调试方便，我们将<code>urlCheck</code>一项改为<code>false</code>:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    "setting": &#123;</span><br><span class="line">        "urlCheck": false,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多关于项目配置文件的描述请见<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html" target="_blank" rel="noopener">这里</a></p><h3 id="三、文件结构"><a href="#三、文件结构" class="headerlink" title="三、文件结构"></a>三、文件结构</h3><p>从微信小程序<a href="https://developers.weixin.qq.com/miniprogram/dev/" target="_blank" rel="noopener">官方文档</a>中我们可以知道小程序的文件组成结构，具体内容如下</p><p>小程序主体部分（项目根目录下）：</p><div class="table-container"><table><thead><tr><th>文件</th><th>必需</th><th>作用</th></tr></thead><tbody><tr><td>app.js</td><td>是</td><td>小程序逻辑</td></tr><tr><td>app.json</td><td>是</td><td>小程序公共配置</td></tr><tr><td>app.wxss</td><td>否</td><td>小程序公共样式表</td></tr></tbody></table></div><p>小程序页面：</p><div class="table-container"><table><thead><tr><th>文件类型</th><th>必需</th><th>作用</th></tr></thead><tbody><tr><td>js</td><td>是</td><td>页面逻辑</td></tr><tr><td>wxml</td><td>是</td><td>页面结构</td></tr><tr><td>json</td><td>否</td><td>页面配置</td></tr><tr><td>wxss</td><td>否</td><td>页面样式表</td></tr></tbody></table></div><p>因此我们在项目目录中新建<code>app.js</code>和<code>app.json</code>，并编辑<code>app.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/index/index"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时开发工具会自动建立<code>pages/index</code>目录及其页面组成文件，至此只包含一个页面的最小项目的框架搭建完成，其文件结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── pages</span><br><span class="line">│   └── index</span><br><span class="line">│       ├── index.js</span><br><span class="line">│       └── index.wxml</span><br><span class="line">└── project.config.json</span><br></pre></td></tr></table></figure></p><h3 id="四、页面逻辑及生命周期"><a href="#四、页面逻辑及生命周期" class="headerlink" title="四、页面逻辑及生命周期"></a>四、页面逻辑及生命周期</h3><p>每个页面的JS文件中通过<code>Page(Object)</code>函数来注册页面，它接受一个<code>对象</code>类型参数，指定页面的初始数据、生命周期回调、事件处理函数等。<br>我在此列举几个主要、常用的<code>对象</code>参数（详见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html" target="_blank" rel="noopener">这里</a>）：</p><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>对象</td><td>页面第一次渲染使用的初始数据，<code>JSON</code>类型</td></tr><tr><td>onLoad</td><td>函数</td><td>页面加载时触发，一个页面只会调用一次</td></tr><tr><td>onShow</td><td>函数</td><td>页面显示/切入前台时触发</td></tr><tr><td>onReady</td><td>函数</td><td>页面初次渲染完成时触发，一个页面只会调用一次</td></tr><tr><td>onHide</td><td>函数</td><td>页面隐藏/切入后台时触发</td></tr><tr><td>其他</td><td>任意</td><td>开发者添加任意函数或数据</td></tr></tbody></table></div><p>其中所有<code>函数</code>类型的参数均为生命周期回调函数<br>我们编辑<code>pages/index</code>的页面逻辑文件<code>index.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    <span class="comment">//页面的初始数据</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        hidden: <span class="literal">true</span>,</span><br><span class="line">        data_from_mongodb: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开发者自定义函数</span></span><br><span class="line">    query: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>)  <span class="comment">//产生0-4的随机数</span></span><br><span class="line">        <span class="keyword">var</span> wxcountry = <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            wxcountry = <span class="string">"China"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">            wxcountry = <span class="string">"US"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">2</span>) &#123;</span><br><span class="line">            wxcountry = <span class="string">"Danmark"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">3</span>) &#123;</span><br><span class="line">            wxcountry = <span class="string">"Germany"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">4</span>) &#123;</span><br><span class="line">            wxcountry = <span class="string">"France"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            url: <span class="string">"http://192.168.56.1:3000/country"</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                country: wxcountry</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                that.setData(&#123;</span><br><span class="line">                    hidden: <span class="literal">false</span>,</span><br><span class="line">                    data_from_mongodb: wxcountry + <span class="string">" : "</span> + res.data</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)  <span class="comment">//从后端请求数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>由于微信小程序支持<code>ECMAScript 6</code>（<code>ES6</code>）标准，因此JS代码可以省略语句末的分号<code>;</code>，并且微信官方所有示例程序均采用省略，因此我们也应该遵循微信小程序的编码规范，语句末省略分号<code>;</code></p><h3 id="五、编译与运行"><a href="#五、编译与运行" class="headerlink" title="五、编译与运行"></a>五、编译与运行</h3><p>点击开发者工具<strong>工具栏</strong>中的<strong>编译</strong>按钮，即可在左侧的<strong>模拟器</strong>中看到运行效果：</p><p><div class="image-size-30"><img src="/2018/10/minimum-end-to-end-system/simulator.png" title="模拟器中的运行效果"></div><br>至此，前端部分建构完成<br><br><br></p><h2 id="将服务部署至VPS-云服务器"><a href="#将服务部署至VPS-云服务器" class="headerlink" title="将服务部署至VPS/云服务器"></a>将服务部署至VPS/云服务器</h2><hr><p>我们可以把我们建构好的服务部署至服务器以实现公网访问，我将该Node+Express+MongoDB组成的服务端部署在<a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a>的VPS上（新加坡机房，用来搭梯子的），由于操作系统是CentOS，在部署过程中部分操作略有不同，在此不再赘述。<br>部署后将微信小程序中<code>pages/index/index.js</code>的查询函数中的URL修改为VPS/云服务器的公网IP:端口号，实现了全网访问服务：</p><p><div class="image-size-30"><img src="/2018/10/minimum-end-to-end-system/phone.png" title="手机中的运行效果"></div><br>至此，最小端到端系统实验完成<br><br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>本实验使我巩固了Node.js、MongoDB、Linux运维、网络原理等多方面知识，并对微信小程序的开发有了一定了解，增强了我对新事物的探索能力。我将在继续深入钻研既学技术的同时努力接触新技术，让自己的技术栈更加充实</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务端搭建&quot;&gt;&lt;a href=&quot;#服务端搭建&quot; class=&quot;headerlink&quot; title=&quot;服务端搭建&quot;&gt;&lt;/a&gt;服务端搭建&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;一、环境准备&quot;&gt;&lt;a href=&quot;#一、环境准备&quot; class=&quot;headerlink&quot; title=&quot;一、环境准备&quot;&gt;&lt;/a&gt;一、环境准备&lt;/h3&gt;&lt;h4 id=&quot;1-操作系统与网络&quot;&gt;&lt;a href=&quot;#1-操作系统与网络&quot; class=&quot;headerlink&quot; title=&quot;1.操作系统与网络&quot;&gt;&lt;/a&gt;1.操作系统与网络&lt;/h4&gt;&lt;p&gt;本文以&lt;a href=&quot;https://www.archlinux.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Arch Linux&lt;/a&gt;为例，在&lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VirtualBox&lt;/a&gt;虚拟机下运行，通过SSH与宿主机连接。&lt;br&gt;由于虚拟机通过NAT联网，要想访问在虚拟机中部署的Web服务需要进行端口转发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开&lt;strong&gt;VirtualBox管理器&lt;/strong&gt;，进入Arch虚拟机的&lt;strong&gt;设置&lt;/strong&gt;页，在&lt;strong&gt;网络&lt;/strong&gt;选项卡中点击&lt;strong&gt;高级&lt;/strong&gt;&lt;div class=&quot;image-size-50&quot;&gt;&lt;img src=&quot;/2018/10/minimum-end-to-end-system/VM_setting.png&quot; title=&quot;虚拟机网络设置&quot;&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;端口转发&lt;/strong&gt;，我们新建一个端口转发规则。协议为&lt;code&gt;TCP&lt;/code&gt;；主机IP填写VirtualBox虚拟网卡的地址，在Windows宿主机通过&lt;code&gt;ipconfig&lt;/code&gt;命令可查看，默认为&lt;code&gt;192.168.56.1&lt;/code&gt;；子系统IP填写虚拟机IPv4地址，在Arch虚拟机中通过&lt;code&gt;ip addr&lt;/code&gt;命令可查看（图中红框所示处）；子系统端口为我们即将部署的Node服务的监听端口；主机端口为转发到主机后的端口，我们应该避开常用或已被占用的端口（如21、22、25、80、443），为了方便我们可以转发到原端口，本文以3000端口为例&lt;div class=&quot;image-size-80&quot;&gt;&lt;img src=&quot;/2018/10/minimum-end-to-end-system/VM_ip.png&quot; title=&quot;Arch查看IP&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;image-size-50&quot;&gt;&lt;img src=&quot;/2018/10/minimum-end-to-end-system/port_forwarding.png&quot; title=&quot;端口转发&quot;&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;这样设置完毕后虚拟机的3000端口就可以通过&lt;code&gt;192.168.56.1:3000&lt;/code&gt;访问了
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="https://pcninja.cn/tags/Linux/"/>
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="网络" scheme="https://pcninja.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="Node.js" scheme="https://pcninja.cn/tags/Node-js/"/>
    
      <category term="Express" scheme="https://pcninja.cn/tags/Express/"/>
    
      <category term="MongoDB" scheme="https://pcninja.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>通过JavaScript实现网页自动刷新</title>
    <link href="https://pcninja.cn/2018/10/web-page-auto-refresh-by-JavaScript/"/>
    <id>https://pcninja.cn/2018/10/web-page-auto-refresh-by-JavaScript/</id>
    <published>2018-10-02T09:24:08.000Z</published>
    <updated>2018-10-04T12:55:21.689Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;很多时候我们需要让网页不断刷新来达到持续监视或刷访问次数等目的，我们可以通过简单的JS脚本来实现网页自动刷新的操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timeout = prompt(<span class="string">"设置刷新时间间隔[S]"</span>);</span><br><span class="line"><span class="keyword">var</span> current = location.href;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="string">'reload()'</span>, <span class="number">1000</span> * timeout);</span><br><span class="line">    <span class="keyword">var</span> myFrame = <span class="string">"&lt;frameset cols=\'*\'&gt;&lt;frame src=\'"</span> + current + <span class="string">"\' /&gt;&lt;/frameset&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> (<span class="built_in">document</span>) &#123;</span><br><span class="line">        write(myFrame);</span><br><span class="line">        <span class="keyword">void</span>(close());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    setTimeout(<span class="string">'reload()'</span>, <span class="number">1000</span> * timeout);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    location.replace(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以打开浏览器提供的开发者工具（如Chrome为F12），进入控制台，复制以上代码来实现功能。<br>为了更加简化操作步骤，我们可以将以下压缩后的JS代码保存至书签栏/收藏夹（Ctrl+D），这样即可快速调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:&#123;<span class="function"><span class="keyword">function</span> <span class="title">reload</span>(<span class="params"></span>)</span>&#123;setTimeout(<span class="string">'reload()'</span>,<span class="number">1000</span>*timeout);<span class="keyword">var</span> myFrame=<span class="string">"&lt;frameset cols='*'&gt;&lt;frame src='"</span>+current+<span class="string">"' /&gt;&lt;/frameset&gt;"</span>;<span class="keyword">with</span>(<span class="built_in">document</span>)&#123;write(myFrame);<span class="keyword">void</span>(close())&#125;&#125;<span class="keyword">var</span> timeout=prompt(<span class="string">"设置刷新时间间隔(s)"</span>);<span class="keyword">var</span> current=location.href;<span class="keyword">if</span>(timeout&gt;<span class="number">0</span>)&#123;setTimeout(<span class="string">'reload()'</span>,<span class="number">1000</span>*timeout)&#125;<span class="keyword">else</span>&#123;location.replace(current)&#125;&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;很多时候我们需要让网页不断刷新来达到持续监视或刷访问次数等目的，我们可以通过简单的JS脚本来实现网页自动刷新的操作。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="https://pcninja.cn/tags/JavaScript/"/>
    
      <category term="脚本" scheme="https://pcninja.cn/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>关于C/C++中主函数的声明及返回值问题</title>
    <link href="https://pcninja.cn/2018/09/about-main-function-declaration-and-returned-value/"/>
    <id>https://pcninja.cn/2018/09/about-main-function-declaration-and-returned-value/</id>
    <published>2018-09-26T03:05:00.000Z</published>
    <updated>2018-10-04T02:40:44.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&emsp;&emsp;在C/C++程序中有时会见到采用诸如<code>void main()</code>等方式来声明主函数，很多人在主函数返回值的问题上也略显随意。经过查阅多版本的C、C++标准文档与相关书籍，我将我的结论与认识总结于此。不可避免地，其中可能包含我错误的认识，欢迎大家指正。<br><a id="more"></a></p><h2 id="main-函数的函数类型"><a href="#main-函数的函数类型" class="headerlink" title="main()函数的函数类型"></a>main()函数的函数类型</h2><p>关于<code>main()</code>的原型，C89/99/11以及C++98/03/11/14等标准给出的说法略有出入，尤其在早期标准中差异更为显著。然而，共同的，在任何一个版本的标准中，均未承认<code>void main()</code>这种声明方式。首先可以得出结论：<code>void main()</code>为错误写法，所有编译器都没有理由支持该种写法。</p></blockquote><p>在K&amp;R C与C89里，若函数没有显式声明返回类型，则默认是<code>int</code>，因此在早期C程序中经常出现这样的主函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种写法在早期标准中是被认可的，<code>main()</code>等价于<code>int main()</code>。但是，C99标准不再支持函数的<code>int</code>类型的默认设置，因此该写法被废止，新的编译器不再允许此类main函数。</p><p>在C99/11标准中，明确定义了对于标准的main函数的两个原型：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure></p><p>为了增强说服力，我在《C Primer Plus》（第六版）（该书以1999 ISO/ANSI作为标准）中找到了这样一段话：</p><blockquote><p>&emsp;&emsp;如果浏览老版本的C代码，您将发现程序常常以：<code>main()</code>这种形式开始。C90标准勉强允许这种形式，但是C99标准不允许。因此即使您当前的编译器允许，也不要这么做。<br>&emsp;&emsp;您还将看到另一种形式：<code>void main()</code><br>&emsp;&emsp;有些编译器允许这种形式，但是还没有任何标准考虑接受它。因而，编译器不必接受这种形式，并且许多编译器也不这样做。再者说，如果坚持使用标准形式，那么当您把程序从一个编译器移到另一个编译器时也不会有问题。</p></blockquote><h2 id="main-函数的形式参数"><a href="#main-函数的形式参数" class="headerlink" title="main()函数的形式参数"></a>main()函数的形式参数</h2><p>此部分C与C++略有差异</p><ul><li>C</li></ul><p>int main()和int main(void)在C语言中是有区别的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// 不等价于</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure></p><p>在C语言中参数列表为空(即不提供参数列表也不为void)，表示不提供参数数量和参数类型信息：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span>           <span class="comment">// 参数列表为空不代表不接受参数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(<span class="string">"Hello, world\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);    <span class="comment">// 调用func()，并传递了参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因此在C中，main函数的参数部分应该以以下两种方式描述：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure></p><p>不应该写：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure></p><ul><li>C++</li></ul><p>由于C和C++中对于函数参数列表的规则并不一致(C++中参数列表为空代表不接收任何参数)。所以C++中main的原型和ISO C也并不太一样。<br>在C++中，下面两种写法是完全等价的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure></p><p>以上两种形式均符合标准。</p><h2 id="main-函数的返回值"><a href="#main-函数的返回值" class="headerlink" title="main()函数的返回值"></a>main()函数的返回值</h2><p>上文指出，<code>main()</code>应以int类型定义，故需要返回一个<code>int</code>类型的返回值到操作系统。<br>在早期标准中，主函数中的<code>return 0;</code>是可以省略的，<code>main()</code>最后如果没有返回值，则会自动<code>return 0;</code>，但是记住，只有main函数是这样，其他函数不能省略<code>return</code>。<br>自C99/C++98以来，主函数的返回值为强制，若漏掉了返回语句，大多数编译器会给出警告，但仍将编译程序。</p><ul><li><code>return 0;</code>：一般用在主函数结束时，按照程序开发的一般惯例，表示成功完成本函数</li><li><code>return -1;</code>：一般用在子函数结尾，按照程序开发的一般惯例，表示该函数失败</li></ul><p><code>main()</code>必须要有返回值的原因是：在C和C++中使用return-statement都是将return的值作为参数来调用exit/std::exit来终止程序。<br>此外，返回值对于某些操作系统（包括DOS和UNIX）而言，具有实际的用途。<br>以Windows为例，编译以下程序：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* test.c */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在命令提示符下运行命令<code>test &amp;&amp; dir</code>，得到以下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\code&gt;test &amp;&amp; dir</span><br><span class="line"></span><br><span class="line"> D:\code 的目录</span><br><span class="line"></span><br><span class="line">2018/09/26  10:31    &lt;DIR&gt;          .</span><br><span class="line">2018/09/26  10:31    &lt;DIR&gt;          ..</span><br><span class="line">2018/09/26  10:29                35 test.c</span><br><span class="line">2018/09/26  10:30            41,664 test.exe</span><br><span class="line">               2 个文件         41,699 字节</span><br><span class="line">               2 个目录 605,409,882,112 可用字节</span><br><span class="line"></span><br><span class="line">D:\code&gt;</span><br></pre></td></tr></table></figure></p><p>test.exe正常结束后执行<code>dir</code>指令，输出了目录列表。<br>若将第4行返回值由0改为-1:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure></p><p>再次执行<code>test &amp;&amp; dir</code>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\code&gt;test &amp;&amp; dir</span><br><span class="line"></span><br><span class="line">D:\code&gt;</span><br></pre></td></tr></table></figure></p><p>test.exe将-1返回给了操作系统，即程序异常结束，因此windows没有继续执行<code>dir</code>打印目录列表。<br>总结一下，正常情况下main函数应以<code>return 0;</code>结束，不能随意更改返回值。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>综上所述，一般情况下，C/C++程序的主函数都应该以如下方法编写：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>    <span class="comment">// void在C++中可省，C不建议省</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即使其他不标准的声明方法也许不会影响程序的正常编译、运行，但为了程序的可移植性与易维护性，我们应该养成良好的编码习惯，利人利己。</p><blockquote><p>参考文献<br>[1] Stephen Prata 编著，《C Primer Plus》，人民邮电出版社，2005年，§2.2 §9.2 §B.5.<br>[2] Andrew Koenig 编著，《C陷阱与缺陷》，人民邮电出版社，2008年，§2.1 §7.1.<br>[3] Stephen Prata 编著，《C++ Primer Plus》，人民邮电出版社，2012年，§2.1 §2.4.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在C/C++程序中有时会见到采用诸如&lt;code&gt;void main()&lt;/code&gt;等方式来声明主函数，很多人在主函数返回值的问题上也略显随意。经过查阅多版本的C、C++标准文档与相关书籍，我将我的结论与认识总结于此。不可避免地，其中可能包含我错误的认识，欢迎大家指正。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="https://pcninja.cn/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="C" scheme="https://pcninja.cn/tags/C/"/>
    
      <category term="C++" scheme="https://pcninja.cn/tags/C/"/>
    
      <category term="编程" scheme="https://pcninja.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>军训小结</title>
    <link href="https://pcninja.cn/2018/09/summary-of-military-training/"/>
    <id>https://pcninja.cn/2018/09/summary-of-military-training/</id>
    <published>2018-09-17T01:59:22.000Z</published>
    <updated>2018-09-17T02:05:04.279Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;2018年9月2日，我与全新结识的同学们踏上了前往北京八达岭军训基地的汽车。天蒙蒙亮，我怀着既紧张又期待的心情开始了为期14天的军事训练。<br>&emsp;&emsp;在军训过程中，我感受到了军旅生活的艰辛与严谨。生活中，同学们在承训教官的悉心指导与监督下坚持每天认真整理内务，培养了雷厉风行的优良作风。同学们士气高涨，“将士们，听党指挥，能打胜仗，作风优良”的歌声时常响彻整个基地；训练中，同学们挥汗如雨，在飞沙走石的训练场上留下了自己坚持的痕迹。教官们的严格要求使我们进一步深化了听从指挥、令行禁止的意识。<br>&emsp;&emsp;此外，穿插在军训期间的演讲比赛、拔河比赛、合唱比赛等文体活动更是为同学们提供了展示自我、结识朋友的机会。同学们在竞争中学会团结、学会合作、学会理解，为今后的学习生活打下了坚实的基础。<br>&emsp;&emsp;9月15日，伴随着《分列式进行曲》，我昂首走过检阅台，展示了刻苦训练的成果。这同时也标志着短暂的军训时光渐渐走向尾声。<br>&emsp;&emsp;通过这次军训，我受益匪浅。我意识到了优良的作风、强健的体魄、坚强的意志是个人与团队进步的先决条件，我将把军训中养成的优良习惯延续到今后的学习生活中。军训不仅提升了我的国防意识，更让我深刻认识到和平的来之不易。铭记历史，缅怀先烈，珍爱和平，开创未来。我将牢牢记住并践行这十六个字，让祖国强大，让世界和平！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;2018年9月2日，我与全新结识的同学们踏上了前往北京八达岭军训基地的汽车。天蒙蒙亮，我怀着既紧张又期待的心情开始了为期14天的军事训练。&lt;br&gt;&amp;emsp;&amp;emsp;在军训过程中，我感受到了军旅生活的艰辛与严谨。生活中，同学们在承训教官的悉心指导
      
    
    </summary>
    
      <category term="文学" scheme="https://pcninja.cn/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="写作" scheme="https://pcninja.cn/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="大学" scheme="https://pcninja.cn/tags/%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
</feed>
